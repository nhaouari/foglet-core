[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/foglet.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst EventEmitter = require('events')\nconst uuid = require('uuid/v4')\nconst lmerge = require('lodash.merge')\n\n// experimental\n// media\nconst MediaStream = require('./utils/media')\n\n// NetworkManager\nconst NetworkManager = require('./network/network-manager.js')\n\n// SSH Control\nconst SSH = require('./utils/ssh.js')\n\n// Foglet default options\nconst DEFAULT_OPTIONS = () => {\n  return {\n    verbose: true, // want some logs ? switch to false otherwise\n    rps: {\n      type: 'spray-wrtc',\n      options: {\n        protocol: 'foglet-example-rps', // foglet running on the protocol foglet-example, defined for spray-wrtc\n        webrtc: { // add WebRTC options\n          trickle: true, // enable trickle (divide offers in multiple small offers sent by pieces)\n          config: {iceServers: []} // define iceServers in non local instance\n        },\n        timeout: 60 * 1000, // spray-wrtc timeout before definitively close a WebRTC connection.\n        pendingTimeout: 60 * 1000,\n        delta: 60 * 1000, // spray-wrtc shuffle interval\n        maxPeers: 5,\n        a: 1, // for spray: a*ln(N) + b, inject a arcs\n        b: 5, // for spray: a*ln(N) + b, inject b arcs\n        signaling: {\n          address: 'https://signaling.herokuapp.com/',\n          // signalingAdress: 'https://signaling.herokuapp.com/', // address of the signaling server\n          room: 'best-room-for-foglet-rps' // room to join\n        }\n      }\n    },\n    overlays: [\n      // {\n      //   class: YourOverlayClass,\n      //   options: {\n      //     delta: 10 * 1000,\n      //     protocol: 'foglet-example-overlay-latencies', // foglet running on the protocol foglet-example, defined for spray-wrtc\n      //     signaling: {\n      //       address: 'https://signaling.herokuapp.com/',\n      //       // signalingAdress: 'https://signaling.herokuapp.com/', // address of the signaling server\n      //       room: 'best-room-for-foglet-overlay' // room to join\n      //     }\n      //   }\n      // }\n    ],\n    ssh: undefined /* {\n      address: 'http://localhost:4000/'\n    } */\n  }\n}\n\n/**\n * A callback invoked when a message is received (either by unicast or broadcast)\n * @callback MessageCallback\n * @param {string} id - The ID of the peer who send the message\n * @param {object} message - The message received\n */\n\n/**\n* Foglet is the main class used to build fog computing applications.\n*\n* It serves as a High level API over a Random Peer Sampling (RPS) network, typically Spray ({@link https://github.com/RAN3D/spray-wrtc}).\n* It provides utilities to send to other peers in the network, and to receives messages send to him by these same peers.\n* Messages can be send to a single neighbour, in a **unicast** way, or to all peers in the network, in a **broadcast** way.\n* @example\n* 'use strict';\n* const Foglet = require('foglet');\n*\n* // let's create a simple application that send message in broadcast\n* const foglet = new Foglet({\n*   rps: {\n*     type: 'spray-wrtc', // we choose Spray as a our RPS\n*     options: {\n*       protocol: 'my-awesome-broadcast-application', // the name of the protocol run by our app\n*       webrtc: { // some WebRTC options\n*         trickle: true, // enable trickle\n*         config: {iceServers : []} // define iceServers here if you want to run this code outside localhost\n*       },\n*       signaling: { // configure the signaling server\n*         address: 'http://signaling.herokuapp.com', // put the URL of the signaling server here\n*         room: 'my-awesome-broadcast-application' // the name of the room for the peers of our application\n*       }\n*     }\n*   }\n* });\n*\n* // connect the foglet to the signaling server\n* foglet.share();\n*\n* // Connect the foglet to our network\n* foglet.connection().then(() => {\n*   // listen for broadcast messages\n*   foglet.onBroadcast((id, message) => {\n*     console.log('The peer', id, 'just sent me by broadcast:', message);\n*   });\n*\n*   // send a message in broadcast\n*   foglet.sendBroadcast('Hello World !');\n* });\n* @author Grall Arnaud (folkvir)\n*/\nclass Foglet extends EventEmitter {\n  /**\n  * Constructor of Foglet\n  * @constructs Foglet\n  * @param {Object} options - Options used to build the Foglet\n  * @param {boolean} options.verbose - If True, activate logging\n  * @param {boolean} options.id - Id of the foglet, will identify the peer as ID-I and ID-O in a neighbor view, respectively for Outgoing and ingoing arcs\n  * @param {Object} options.rps - Options used to configure the Random Peer Sampling (RPS) network\n  * @param {string} options.rps.type - The type of RPS (`spray-wrtc` for Spray, `cyclon` for Cyclon or `custom` for a custom network\n  * @param {Object} options.rps.options - Options by the type of RPS choosed\n  * @param {string} options.rps.options.protocol - Name of the protocol run by the application\n  * @param {string} options.rps.options.maxPeers - Using Cyclon, fix the max number of peers in the partial view\n  * @param {Object} options.rps.options.webrtc - WebRTC dedicated options (see SimplePeer @see(https://github.com/feross/simple-peer) WebRTC docs for more details)\n  * @param {number} options.rps.options.timeout - RPS timeout before definitively close a WebRTC connection\n  * @param {number} options.rps.options.delta - RPS shuffle interval\n  * @param {Object} options.rps.options.signaling - Options used to configure the interactions with the signaling server\n  * @param {string} options.rps.options.signaling.address - URL of the signaling server\n  * @param {string} options.rps.options.signaling.room - Name of the room in which the application run\n  * @param {Object} options.overlay - Options used to configure custom overlay in addition of the RPS\n  * @param {Object} options.overlay.options - Options propagated to all overlays, same as the options field used to configure the RPS.\n  * @param {OverlayConfig[]} options.overlay.overlays - Set of config objects used to build the overlays\n  * @throws {InitConstructException} thrown when options are not provided\n  * @throws {ConstructException} thrown when key options are missing\n  * @returns {void}\n  */\n  constructor (options = {}) {\n    super()\n    this._options = lmerge(DEFAULT_OPTIONS(), options)\n    // set a new id for the foglet\n    if (!this._options.id) this._options.id = uuid()\n    // the the id for the RPS, (using n2n-overlay-wrtc, this is .PEER in options)\n    this._options.rps.options.peer = this._options.id\n    // set the id as class variable for visibility\n    this._id = this._options.id\n    this._networkManager = new NetworkManager(this._options)\n\n    // SSH Control\n    // currently disabled\n    if (this._options.ssh && this._options.ssh.address) {\n      this._ssh = new SSH({\n        foglet: this,\n        address: this._options.ssh.address\n      })\n    }\n  }\n\n  /**\n   * Get the foglet ID.\n   *\n   * **WARNING:** this id is not the same as used by the RPS.\n   * @return {string} The foglet ID\n   */\n  get id () {\n    return this._id\n  }\n\n  /**\n   * Get the in-view ID of this foglet\n   * @return {string} The in-view ID of the foglet\n   */\n  get inViewID () {\n    return this.overlay().network.inviewId\n  }\n\n  /**\n   * Get the out-view ID of this foglet\n   * @return {string} The out-view ID of the foglet\n   */\n  get outViewID () {\n    return this.overlay().network.outviewId\n  }\n\n  /**\n  * Connect the Foglet to the network.\n  * If a parameter is supplied, the foglet try to connect with another foglet.\n  *\n  * Otherwise, it uses the signaling server to perform the connection.\n  * In this case, one must call {@link Foglet#share} before, to connect the foglet to the signaling server first.\n  *\n  * By default, connect the foglet to the base RPS. Use the `name` parameter to select which overlay to connect with.\n  * @param {Foglet} [foglet=null] - (optional) Foglet to connect with. Leav to `null` rely on the signaling server.\n  * @param {string} [name=null] - (optional) Name of the overlay to connect. Default to the RPS.\n  * @param {number} [timeout=60000] - (optional) Connection timeout. Default to 6.0s\n  * @return {Promise} A Promise fullfilled when the foglet is connected\n  * @example\n  * const foglet = new Foglet({\n  *   // some options...\n  * });\n  * foglet.share();\n  * foglet.connection().then(console.log).catch(console.err);\n  */\n  connection (foglet = null, name = null, timeout = this._options.pendingTimeout) {\n    return new Promise((resolve, reject) => {\n      if (foglet !== null) {\n        this.overlay(name).signaling.connection(foglet.overlay(name).network, timeout).then((result) => {\n          this.emit('connect')\n          resolve(result.connected)\n        }).catch(e => {\n          reject(e)\n        })\n      } else {\n        this.overlay(name).signaling.connection(null, timeout).then((result) => {\n          this.emit('connect')\n          resolve(result.connected)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Connect the foglet to the signaling server.\n   *\n   * By default, connect the RPS to the signaling server. Use the `name` parameter to select which overlay to connect.\n   * @param  {string} [name=null] - (optional) Name of the overlay to connect to the signaling server. Default to the RPS.\n   * @return {void}\n   */\n  share (name = null) {\n    this.overlay(name).signaling.signaling()\n  }\n\n  /**\n   * Revoke the connection with the signaling server.\n   *\n   * By default, disconnect the RPS from the signaling server. Use the `name` parameter to select which overlay to connect.\n   * @param  {integer} [name=null] - (optional) Name of the overlay to disconnect from the signaling server. Default to the RPS.\n   * @return {void}\n   */\n  unshare (name = null) {\n    this.overlay(name).signaling.unsignaling()\n  }\n\n  /**\n   * Select and get an overlay to use for communication using its index.\n   * The RPS is always provided when no parameter are provided.\n   * Then, overlays are indexed by their name.\n   * @param  {string} [name=null] - (optional) Name of the overlay to get. Default to the RPS.\n   * @return {Network} Return the network for the given ID.\n   * @example\n   * const foglet = new Foglet({\n   *  // some options...\n   * });\n   *\n   * // Get the 'latencies' overlay\n   * const overlay = foglet.overlay('latencies');\n   */\n  overlay (name = null) {\n    return this._networkManager.overlay(name)\n  }\n\n  /**\n   * Register a middleware, with an optional priority\n   * @param  {Object} middleware   - The middleware to register\n   * @param  {function} middleware.in - Function applied on middleware input\n   * @param  {function} middleware.out - Function applied on middleware output\n   * @param  {Number} [priority=0] - (optional) The middleware priority\n   * @return {void}\n   * @example\n   * const foglet = new Foglet({\n   *  // some options...\n   * });\n   *\n   * const middleware = {\n   *  in: msg => {\n   *    return msg + ' and Thanks';\n   *  },\n   *  out: msg => {\n   *    return msg + ' for all the Fish';\n   *  }\n   * };\n   *\n   * foglet.use(middleware);\n   */\n  use (middleware, priority = 0) {\n    this._networkManager.registerMiddleware(middleware, priority)\n  }\n\n  /**\n  * Listen for incoming **broadcast** messages, and invoke a callback on each of them.\n  * @param {MessageCallback} callback - Callback function inovked with the message\n  * @returns {void}\n  * @example\n  * const foglet = new Foglet({\n  *   // some options...\n  * });\n  *\n  * foglet.onBroadcast((id, msg) => {\n  *   console.log('The peer', id, 'just sent by broadcast:', msg);\n  * });\n  **/\n  onBroadcast (callback) {\n    this.overlay().communication.onBroadcast(callback)\n  }\n\n  /**\n  * Listen on incoming unicasted streams\n  * @param  {MessageCallback} callback - Callback invoked with a {@link StreamMessage} as message\n  * @return {void}\n  * @example\n  * const foglet = getSomeFoglet();\n  *\n  * foglet.onStreamBroadcast((id, stream) => {\n  *  console.log('a peer with id = ', id, ' is streaming data to me');\n  *  stream.on('data', data => console.log(data));\n  *  stream.on('end', () => console.log('no more data available from the stream'));\n  * });\n  */\n  onStreamBroadcast (callback) {\n    this.overlay().communication.onStreamBroadcast(callback)\n  }\n\n  /**\n  * Send a broadcast message to all connected peers in the network.\n  * @param {object} message - The message to send\n  * @return {boolean} True if the messahe has been sent, False otherwise\n  * @example\n  * const foglet = new Foglet({\n  *   // some options...\n  * });\n  *\n  * foglet.sendBroadcast('Hello everyone!');\n  */\n  sendBroadcast (message) {\n    return this.overlay().communication.sendBroadcast(message)\n  }\n\n  /**\n  * Begin the streaming of a message to all peers (using broadcast)\n  * @param  {VersionVector} [isReady=undefined] - Id of the message to wait before this message is received\n  * @return {StreamRequest} Stream used to transmit data to all peers\n  * @example\n  * const foglet = getSomeFoglet();\n  *\n  * const stream = foglet.sendBroadcast();\n  * stream.write('Hello');\n  * stream.write(' world!');\n  * stream.end();\n  */\n  streamBroadcast (isReady = undefined) {\n    return this.overlay().communication.streamBroadcast(isReady)\n  }\n\n  /**\n  * Listen for incoming **unicast** messages, and invoke a callback on each of them.\n  * @param {MessageCallback} callback - Callback function inovked with the message\n  * @return {void}\n  * @example\n  * const foglet = new Foglet({\n  *   // some options...\n  * });\n  *\n  * foglet.onUnicast((id, msg) => {\n  *   console.log('My neighbour', id, 'just sent me by unicast:', msg);\n  * });\n  **/\n  onUnicast (callback) {\n    this.overlay().communication.onUnicast(callback)\n  }\n\n  /**\n  * Listen on incoming unicasted streams\n  * @param  {MessageCallback} callback - Callback invoked with a {@link StreamMessage} as message\n  * @return {void}\n  * @example\n  * const foglet = getSomeFoglet();\n  *\n  * foglet.onStreamUnicast((id, stream) => {\n  *  console.log('a peer with id = ', id, ' is streaming data to me');\n  *  stream.on('data', data => console.log(data));\n  *  stream.on('end', () => console.log('no more data available from the stream'));\n  * });\n  */\n  onStreamUnicast (callback) {\n    this.overlay().communication.onStreamUnicast(callback)\n  }\n\n  /**\n  * Send a message to a specific neighbour (in a **unicast** way).\n  * @param {string} id - The ID of the targeted neighbour\n  * @param {object} message - The message to send\n  * @return {boolean} True if the messahe has been sent, False otherwise\n  * @example\n  * const foglet = new Foglet({\n  *   // some options...\n  * });\n  *\n  * // get the ID of one neighbour\n  * const id = foglet.getRandomNeighbourId();\n  *\n  * foglet.sendUnicast(id, 'Hi diddly ho neighborino!');\n  */\n  sendUnicast (id, message) {\n    return this.overlay().communication.sendUnicast(id, message)\n  }\n\n  /**\n  * Begin the streaming of a message to another peer (using unicast)\n  * @param  {string} id - Id of the peer\n  * @return {StreamRequest} Stream used to transmit data to another peer\n  * @example\n  * const foglet = getSomeFoglet();\n  * const peerID = getSomePeerID();\n  *\n  * const stream = foglet.streamUnicast(peerID);\n  * stream.write('Hello');\n  * stream.write(' world!');\n  * stream.end();\n  */\n  streamUnicast (id) {\n    return this.overlay().communication.streamUnicast(id)\n  }\n\n  /**\n  * Send a message to a set of neighbours (in a **multicast** way).\n  * These messages will be received by neighbours on the **unicast** channel.\n  * @param {string[]} ids - The IDs of the targeted neighbours\n  * @param {object} message - The message to send\n  * @return {boolean} True if the messahe has been sent, False otherwise\n  * @example\n  * const foglet = new Foglet({\n  *   // some options...\n  * });\n  *\n  * // get IDs of some neighbours\n  * const ids = foglet.getNeighbours(5);\n  *\n  * foglet.sendMulticast(ids, 'Everyone, get in here!');\n  */\n  sendMulticast (ids = [], message) {\n    return this.overlay().communication.sendMulticast(ids, message)\n  }\n\n  /**\n   * Create an object media stream with sendUnicast and sendBroadcast methods\n   * @param  {[type]} [overlayname=null] The name of the overlay to use for send messages\n   * @param {Object} [options={}] the options to use for creating the media manager (default chunkSize=128k)\n   * @return {MediaStream}\n   */\n  createMedia (overlayname = null, options = {}) {\n    // experimental media send/receive stream\n    console.warn('[Warning] these methods are experimental.')\n    return new MediaStream(this.overlay(overlayname).network, this.overlay(overlayname).network.protocol, options)\n  }\n\n  /**\n  * Get the ID of a random neighbour\n  * @return {string|null} The ID of a random neighbour, or `null` if not found\n  */\n  getRandomNeighbourId () {\n    const peers = this.overlay().network.getNeighbours()\n    if (peers.length === 0) {\n      return null\n    } else {\n      try {\n        const random = Math.floor(Math.random() * peers.length)\n        const result = peers[random]\n        return result\n      } catch (e) {\n        console.error(e)\n        return null\n      }\n    }\n  }\n\n  /**\n   * Return an array with all arcs Ids (i.e.: all connection availables)\n   * @param  {[type]} [overlayName=undefined] Define the overlay to use\n   * @return {String[]} Array of ids\n   * @example\n   * const foglet = new Foglet();\n   *\n   * // print the IDs of up to five neighbours\n   * console.log(foglet.getArcs());\n   * // will return ['peer1-O', 'peer2-I', 'peer2-O', 'peer3-I'...]\n   */\n  getArcs (overlayName = undefined) {\n    return this.overlay(overlayName = undefined).network.getArcs()\n  }\n\n  /**\n  * Get the IDs of all available neighbours with or without their suffix -I or -O\n  * @param  {Boolean} [transform=true] - enable the transformation of ids eg: 'peer' or 'peer-O'\n  * @param {String} [overlayName=undefined] - Define the overlay to use\n  * @return {String[]} Set of IDs for all available neighbours\n  * @example\n  * const foglet = new Foglet({\n  *   // some options...\n  * });\n  *\n  * // print the IDs of up to five neighbours\n  * console.log(foglet.getReachableNeighbours());\n  * // will return ['peer1-O', 'peer2-O', 'peer3-O', ...]\n  * // print the IDs of all neighbours\n  * console.log(foglet.getReachableNeighbours(false));\n  * // will return ['peer1', 'peer2', 'peer3', ...]\n  */\n  getReachableNeighbours (transform = true, overlayName = undefined) {\n    return this.overlay(overlayName).network.getReachableNeighbours(transform)\n  }\n\n  /**\n  * Get the IDs of all available neighbours with or without their suffix -I or -O\n  * @param  {Integer} [limit=true] - Max number of neighbours to look for\n  * @param {String} [overlayName=undefined] - Define the overlay to use\n  * @return {String[]} Set of IDs for all available neighbours\n  * @example\n  * const foglet = new Foglet({\n  *   // some options...\n  * });\n  *\n  * // print the IDs of up to five neighbours\n  * console.log(foglet.getNeighbours());\n  * // will return ['peer1-I', 'peer2-I', 'peer3-I', ...]\n  * // print the IDs of all neighbours\n  * console.log(foglet.getNeighbours(Infinity));\n  * // will return ['peer1-I', 'peer1-O', 'peer3-I', ...]\n  */\n  getNeighbours (limit = true, overlayName = undefined) {\n    return this.overlay(overlayName).network.getNeighbours(limit)\n  }\n}\n\nmodule.exports = Foglet\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/foglet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "DEFAULT_OPTIONS",
    "memberof": "src/foglet.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/foglet.js~DEFAULT_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/foglet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"verbose\": boolean, \"rps\": *, \"overlays\": *, \"ssh\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Foglet",
    "memberof": "src/foglet.js",
    "static": true,
    "longname": "src/foglet.js~Foglet",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/foglet.js",
    "importStyle": "Foglet",
    "description": "Foglet is the main class used to build fog computing applications.\n\nIt serves as a High level API over a Random Peer Sampling (RPS) network, typically Spray ({@link https://github.com/RAN3D/spray-wrtc}).\nIt provides utilities to send to other peers in the network, and to receives messages send to him by these same peers.\nMessages can be send to a single neighbour, in a **unicast** way, or to all peers in the network, in a **broadcast** way.",
    "examples": [
      "'use strict';\nconst Foglet = require('foglet');\n\n// let's create a simple application that send message in broadcast\nconst foglet = new Foglet({\n  rps: {\n    type: 'spray-wrtc', // we choose Spray as a our RPS\n    options: {\n      protocol: 'my-awesome-broadcast-application', // the name of the protocol run by our app\n      webrtc: { // some WebRTC options\n        trickle: true, // enable trickle\n        config: {iceServers : []} // define iceServers here if you want to run this code outside localhost\n      },\n      signaling: { // configure the signaling server\n        address: 'http://signaling.herokuapp.com', // put the URL of the signaling server here\n        room: 'my-awesome-broadcast-application' // the name of the room for the peers of our application\n      }\n    }\n  }\n});\n\n// connect the foglet to the signaling server\nfoglet.share();\n\n// Connect the foglet to our network\nfoglet.connection().then(() => {\n  // listen for broadcast messages\n  foglet.onBroadcast((id, message) => {\n    console.log('The peer', id, 'just sent me by broadcast:', message);\n  });\n\n  // send a message in broadcast\n  foglet.sendBroadcast('Hello World !');\n});"
    ],
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Grall Arnaud (folkvir)"
      }
    ],
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#constructor",
    "access": "public",
    "description": "Constructor of Foglet",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "Foglet"
      },
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options used to build the Foglet"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.verbose",
        "description": "If True, activate logging"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.id",
        "description": "Id of the foglet, will identify the peer as ID-I and ID-O in a neighbor view, respectively for Outgoing and ingoing arcs"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps",
        "description": "Options used to configure the Random Peer Sampling (RPS) network"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.type",
        "description": "The type of RPS (`spray-wrtc` for Spray, `cyclon` for Cyclon or `custom` for a custom network"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options",
        "description": "Options by the type of RPS choosed"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.protocol",
        "description": "Name of the protocol run by the application"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.maxPeers",
        "description": "Using Cyclon, fix the max number of peers in the partial view"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.webrtc",
        "description": "WebRTC dedicated options (see SimplePeer @see(https://github.com/feross/simple-peer) WebRTC docs for more details)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.timeout",
        "description": "RPS timeout before definitively close a WebRTC connection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.delta",
        "description": "RPS shuffle interval"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.signaling",
        "description": "Options used to configure the interactions with the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.signaling.address",
        "description": "URL of the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.signaling.room",
        "description": "Name of the room in which the application run"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.overlay",
        "description": "Options used to configure custom overlay in addition of the RPS"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.overlay.options",
        "description": "Options propagated to all overlays, same as the options field used to configure the RPS."
      },
      {
        "nullable": null,
        "types": [
          "OverlayConfig[]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.overlay.overlays",
        "description": "Set of config objects used to build the overlays"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "InitConstructException"
        ],
        "description": "thrown when options are not provided"
      },
      {
        "types": [
          "ConstructException"
        ],
        "description": "thrown when key options are missing"
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_options",
    "memberof": "src/foglet.js~Foglet",
    "static": false,
    "longname": "src/foglet.js~Foglet#_options",
    "access": "private",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_id",
    "memberof": "src/foglet.js~Foglet",
    "static": false,
    "longname": "src/foglet.js~Foglet#_id",
    "access": "private",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_networkManager",
    "memberof": "src/foglet.js~Foglet",
    "static": false,
    "longname": "src/foglet.js~Foglet#_networkManager",
    "access": "private",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_ssh",
    "memberof": "src/foglet.js~Foglet",
    "static": false,
    "longname": "src/foglet.js~Foglet#_ssh",
    "access": "private",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "get",
    "name": "id",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#id",
    "access": "public",
    "description": "Get the foglet ID.\n\n**WARNING:** this id is not the same as used by the RPS.",
    "lineNumber": 187,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The foglet ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "get",
    "name": "inViewID",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#inViewID",
    "access": "public",
    "description": "Get the in-view ID of this foglet",
    "lineNumber": 195,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The in-view ID of the foglet"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "get",
    "name": "outViewID",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#outViewID",
    "access": "public",
    "description": "Get the out-view ID of this foglet",
    "lineNumber": 203,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The out-view ID of the foglet"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "connection",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#connection",
    "access": "public",
    "description": "Connect the Foglet to the network.\nIf a parameter is supplied, the foglet try to connect with another foglet.\n\nOtherwise, it uses the signaling server to perform the connection.\nIn this case, one must call {@link Foglet#share} before, to connect the foglet to the signaling server first.\n\nBy default, connect the foglet to the base RPS. Use the `name` parameter to select which overlay to connect with.",
    "examples": [
      "const foglet = new Foglet({\n  // some options...\n});\nfoglet.share();\nfoglet.connection().then(console.log).catch(console.err);"
    ],
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "Foglet"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "foglet",
        "description": "(optional) Foglet to connect with. Leav to `null` rely on the signaling server."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "(optional) Name of the overlay to connect. Default to the RPS."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "60000",
        "defaultRaw": 60000,
        "name": "timeout",
        "description": "(optional) Connection timeout. Default to 6.0s"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise fullfilled when the foglet is connected"
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "share",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#share",
    "access": "public",
    "description": "Connect the foglet to the signaling server.\n\nBy default, connect the RPS to the signaling server. Use the `name` parameter to select which overlay to connect.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "(optional) Name of the overlay to connect to the signaling server. Default to the RPS."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "unshare",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#unshare",
    "access": "public",
    "description": "Revoke the connection with the signaling server.\n\nBy default, disconnect the RPS from the signaling server. Use the `name` parameter to select which overlay to connect.",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "(optional) Name of the overlay to disconnect from the signaling server. Default to the RPS."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "overlay",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#overlay",
    "access": "public",
    "description": "Select and get an overlay to use for communication using its index.\nThe RPS is always provided when no parameter are provided.\nThen, overlays are indexed by their name.",
    "examples": [
      "const foglet = new Foglet({\n // some options...\n});\n\n// Get the 'latencies' overlay\nconst overlay = foglet.overlay('latencies');"
    ],
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "(optional) Name of the overlay to get. Default to the RPS."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Network"
      ],
      "spread": false,
      "description": "Return the network for the given ID."
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "use",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#use",
    "access": "public",
    "description": "Register a middleware, with an optional priority",
    "examples": [
      "const foglet = new Foglet({\n // some options...\n});\n\nconst middleware = {\n in: msg => {\n   return msg + ' and Thanks';\n },\n out: msg => {\n   return msg + ' for all the Fish';\n }\n};\n\nfoglet.use(middleware);"
    ],
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "The middleware to register"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.in",
        "description": "Function applied on middleware input"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.out",
        "description": "Function applied on middleware output"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "priority",
        "description": "(optional) The middleware priority"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "onBroadcast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#onBroadcast",
    "access": "public",
    "description": "Listen for incoming **broadcast** messages, and invoke a callback on each of them.",
    "examples": [
      "const foglet = new Foglet({\n  // some options...\n});\n\nfoglet.onBroadcast((id, msg) => {\n  console.log('The peer', id, 'just sent by broadcast:', msg);\n});"
    ],
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function inovked with the message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "onStreamBroadcast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#onStreamBroadcast",
    "access": "public",
    "description": "Listen on incoming unicasted streams",
    "examples": [
      "const foglet = getSomeFoglet();\n\nfoglet.onStreamBroadcast((id, stream) => {\n console.log('a peer with id = ', id, ' is streaming data to me');\n stream.on('data', data => console.log(data));\n stream.on('end', () => console.log('no more data available from the stream'));\n});"
    ],
    "lineNumber": 343,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback invoked with a {@link StreamMessage} as message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "sendBroadcast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#sendBroadcast",
    "access": "public",
    "description": "Send a broadcast message to all connected peers in the network.",
    "examples": [
      "const foglet = new Foglet({\n  // some options...\n});\n\nfoglet.sendBroadcast('Hello everyone!');"
    ],
    "lineNumber": 358,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the messahe has been sent, False otherwise"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "streamBroadcast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#streamBroadcast",
    "access": "public",
    "description": "Begin the streaming of a message to all peers (using broadcast)",
    "examples": [
      "const foglet = getSomeFoglet();\n\nconst stream = foglet.sendBroadcast();\nstream.write('Hello');\nstream.write(' world!');\nstream.end();"
    ],
    "lineNumber": 374,
    "params": [
      {
        "nullable": null,
        "types": [
          "VersionVector"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "isReady",
        "description": "Id of the message to wait before this message is received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StreamRequest"
      ],
      "spread": false,
      "description": "Stream used to transmit data to all peers"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "onUnicast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#onUnicast",
    "access": "public",
    "description": "Listen for incoming **unicast** messages, and invoke a callback on each of them.",
    "examples": [
      "const foglet = new Foglet({\n  // some options...\n});\n\nfoglet.onUnicast((id, msg) => {\n  console.log('My neighbour', id, 'just sent me by unicast:', msg);\n});"
    ],
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function inovked with the message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "onStreamUnicast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#onStreamUnicast",
    "access": "public",
    "description": "Listen on incoming unicasted streams",
    "examples": [
      "const foglet = getSomeFoglet();\n\nfoglet.onStreamUnicast((id, stream) => {\n console.log('a peer with id = ', id, ' is streaming data to me');\n stream.on('data', data => console.log(data));\n stream.on('end', () => console.log('no more data available from the stream'));\n});"
    ],
    "lineNumber": 408,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback invoked with a {@link StreamMessage} as message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "sendUnicast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#sendUnicast",
    "access": "public",
    "description": "Send a message to a specific neighbour (in a **unicast** way).",
    "examples": [
      "const foglet = new Foglet({\n  // some options...\n});\n\n// get the ID of one neighbour\nconst id = foglet.getRandomNeighbourId();\n\nfoglet.sendUnicast(id, 'Hi diddly ho neighborino!');"
    ],
    "lineNumber": 427,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID of the targeted neighbour"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the messahe has been sent, False otherwise"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "streamUnicast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#streamUnicast",
    "access": "public",
    "description": "Begin the streaming of a message to another peer (using unicast)",
    "examples": [
      "const foglet = getSomeFoglet();\nconst peerID = getSomePeerID();\n\nconst stream = foglet.streamUnicast(peerID);\nstream.write('Hello');\nstream.write(' world!');\nstream.end();"
    ],
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the peer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StreamRequest"
      ],
      "spread": false,
      "description": "Stream used to transmit data to another peer"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "sendMulticast",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#sendMulticast",
    "access": "public",
    "description": "Send a message to a set of neighbours (in a **multicast** way).\nThese messages will be received by neighbours on the **unicast** channel.",
    "examples": [
      "const foglet = new Foglet({\n  // some options...\n});\n\n// get IDs of some neighbours\nconst ids = foglet.getNeighbours(5);\n\nfoglet.sendMulticast(ids, 'Everyone, get in here!');"
    ],
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "The IDs of the targeted neighbours"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the messahe has been sent, False otherwise"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "createMedia",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#createMedia",
    "access": "public",
    "description": "Create an object media stream with sendUnicast and sendBroadcast methods",
    "lineNumber": 474,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "overlayname",
        "description": "The name of the overlay to use for send messages"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "the options to use for creating the media manager (default chunkSize=128k)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MediaStream"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "getRandomNeighbourId",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#getRandomNeighbourId",
    "access": "public",
    "description": "Get the ID of a random neighbour",
    "lineNumber": 484,
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": "The ID of a random neighbour, or `null` if not found"
    },
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getArcs",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#getArcs",
    "access": "public",
    "description": "Return an array with all arcs Ids (i.e.: all connection availables)",
    "examples": [
      "const foglet = new Foglet();\n\n// print the IDs of up to five neighbours\nconsole.log(foglet.getArcs());\n// will return ['peer1-O', 'peer2-I', 'peer2-O', 'peer3-I'...]"
    ],
    "lineNumber": 511,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "overlayName",
        "description": "Define the overlay to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Array of ids"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "getReachableNeighbours",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#getReachableNeighbours",
    "access": "public",
    "description": "Get the IDs of all available neighbours with or without their suffix -I or -O",
    "examples": [
      "const foglet = new Foglet({\n  // some options...\n});\n\n// print the IDs of up to five neighbours\nconsole.log(foglet.getReachableNeighbours());\n// will return ['peer1-O', 'peer2-O', 'peer3-O', ...]\n// print the IDs of all neighbours\nconsole.log(foglet.getReachableNeighbours(false));\n// will return ['peer1', 'peer2', 'peer3', ...]"
    ],
    "lineNumber": 532,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "transform",
        "description": "enable the transformation of ids eg: 'peer' or 'peer-O'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "overlayName",
        "description": "Define the overlay to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getNeighbours",
    "memberof": "src/foglet.js~Foglet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/foglet.js~Foglet#getNeighbours",
    "access": "public",
    "description": "Get the IDs of all available neighbours with or without their suffix -I or -O",
    "examples": [
      "const foglet = new Foglet({\n  // some options...\n});\n\n// print the IDs of up to five neighbours\nconsole.log(foglet.getNeighbours());\n// will return ['peer1-I', 'peer2-I', 'peer3-I', ...]\n// print the IDs of all neighbours\nconsole.log(foglet.getNeighbours(Infinity));\n// will return ['peer1-I', 'peer1-O', 'peer3-I', ...]"
    ],
    "lineNumber": 553,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "limit",
        "description": "Max number of neighbours to look for"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "overlayName",
        "description": "Define the overlay to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/fprotocol/answer-queue.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst uuid = require('uuid/v4')\n\n/**\n * An AnswerQueue stamp messages with unique ids and allow peers to answer to service calls\n * using the `reply` and `reject` helpers.\n * @author Thomas Minier\n */\nclass AnswerQueue {\n  /**\n   * Constructor\n   */\n  constructor () {\n    this._waitingAnswers = new Map()\n  }\n\n  /**\n   * Stamp a message and connect to a promise resolved with it answer\n   * @param {Object} message - The message to stamp\n   * @param {function} resolve - The function used to resolve the promise when the answer is received\n   * @param {function} reject - The function used to reject the promise when the answer is received\n   * @return {Object} The stamped message\n   */\n  stamp (message, resolve, reject) {\n    const answerID = uuid()\n    this._waitingAnswers.set(answerID, { resolve, reject })\n    return Object.assign({ answerID }, message)\n  }\n\n  /**\n   * Resolve the answer to a message\n   * @param {string} answerID - The id of the answer to resolve\n   * @param {*} payload - The answer's content\n   * @return {void}\n   */\n  resolve (answerID, payload) {\n    if (this._waitingAnswers.has(answerID)) {\n      this._waitingAnswers.get(answerID).resolve(payload)\n      this._waitingAnswers.delete(answerID)\n    }\n  }\n\n  /**\n   * Resolve an answer by a reject\n   * @param {string} answerID - The id of the answer to reject\n   * @param {*} payload - The answer's content\n   * @return {void}\n   */\n  reject (answerID, payload) {\n    if (this._waitingAnswers.has(answerID)) {\n      this._waitingAnswers.get(answerID).reject(payload)\n      this._waitingAnswers.delete(answerID)\n    }\n  }\n}\n\nmodule.exports = AnswerQueue\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/answer-queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "AnswerQueue",
    "memberof": "src/fprotocol/answer-queue.js",
    "static": true,
    "longname": "src/fprotocol/answer-queue.js~AnswerQueue",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/fprotocol/answer-queue.js",
    "importStyle": "AnswerQueue",
    "description": "An AnswerQueue stamp messages with unique ids and allow peers to answer to service calls\nusing the `reply` and `reject` helpers.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 80,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/fprotocol/answer-queue.js~AnswerQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/answer-queue.js~AnswerQueue#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 37
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "_waitingAnswers",
    "memberof": "src/fprotocol/answer-queue.js~AnswerQueue",
    "static": false,
    "longname": "src/fprotocol/answer-queue.js~AnswerQueue#_waitingAnswers",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "stamp",
    "memberof": "src/fprotocol/answer-queue.js~AnswerQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/answer-queue.js~AnswerQueue#stamp",
    "access": "public",
    "description": "Stamp a message and connect to a promise resolved with it answer",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to stamp"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "resolve",
        "description": "The function used to resolve the promise when the answer is received"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "reject",
        "description": "The function used to reject the promise when the answer is received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The stamped message"
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/fprotocol/answer-queue.js~AnswerQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/answer-queue.js~AnswerQueue#resolve",
    "access": "public",
    "description": "Resolve the answer to a message",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "answerID",
        "description": "The id of the answer to resolve"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "The answer's content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "reject",
    "memberof": "src/fprotocol/answer-queue.js~AnswerQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/answer-queue.js~AnswerQueue#reject",
    "access": "public",
    "description": "Resolve an answer by a reject",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "answerID",
        "description": "The id of the answer to reject"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "The answer's content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/fprotocol/builders/abstract-method-builder.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst utils = require('../utils.js')\n\n/**\n * Apply hooks on a message in reduce fashion.\n * Hooks may return a new message. If it's not the case, the previous message is used for the next reduce step.\n * @private\n * @param  {function[]} hooks - Set of hooks\n * @return {function} A function that apply the set of hooks to a message\n */\nfunction reduceHooks (hooks) {\n  return msg => {\n    let tmp\n    return hooks.reduce((prev, hook) => {\n      tmp = hook(prev)\n      if (tmp === undefined || tmp === null) { return prev }\n      return tmp\n    }, msg)\n  }\n}\n\n/**\n * An AbstractBuilder defines an abstract class capable of builiding a service method.\n * It defines, in the prototype of a protocol subclass:\n * * The service method, used to send messages.\n * * The service handler, used to handle reception of messages for this service.\n * * The service hooks, executed before/after a message is sent/recevied.\n * @abstract\n * @author Thomas Minier\n */\nclass AbstractMethodBuilder {\n  /**\n   * Constructor\n   * @param  {string} serviceName - The name of the service\n   */\n  constructor (serviceName) {\n    this._serviceName = serviceName\n    this._camelCasedName = utils.camelCase(this._serviceName)\n    this._capitalizedCamelCase = utils.capitalize(this._camelCasedName)\n  }\n\n  get methodName () {\n    return this._camelCasedName\n  }\n\n  get handlerName () {\n    return `_${this._camelCasedName}`\n  }\n\n  get beforeSendName () {\n    return `_beforeSend${this._capitalizedCamelCase}`\n  }\n\n  get beforeReceiveName () {\n    return `_beforeReceive${this._capitalizedCamelCase}`\n  }\n\n  get afterSendName () {\n    return `_afterSend${this._capitalizedCamelCase}`\n  }\n\n  get afterReceiveName () {\n    return `_afterReceive${this._capitalizedCamelCase}`\n  }\n\n  /**\n   * Build the service method used to send messages.\n   * @param  {function} protocol - The protocol class\n   * @return {void}\n   */\n  buildService (protocol) {\n    throw new Error('A valid Builder must implement a valid buildService method')\n  }\n\n  /**\n   * Build the service handler\n   * @param  {function} protocol - The protocol class\n   * @param  {function} handler  - The callback used when a message is received for this service\n   * @return {void}\n   */\n  buildHandler (protocol, handler) {\n    protocol.prototype[this.handlerName] = handler\n  }\n\n  /**\n   * Build the before hooks for this service.\n   * @param  {function} protocol - The protocol class\n   * @param  {Object} beforeHooks - The hooks executed before a message is sent/received\n   * @return {void}\n   */\n  buildBeforeHooks (protocol, beforeHooks) {\n    if (beforeHooks.send.length > 0) { protocol.prototype[this.beforeSendName] = reduceHooks(beforeHooks.send) }\n    if (beforeHooks.receive.length > 0) { protocol.prototype[this.beforeReceiveName] = reduceHooks(beforeHooks.receive) }\n  }\n\n  /**\n   * Build the after hooks for this service.\n   * @param  {function} protocol - The protocol class\n   * @param  {Object} afterHooks - The hooks executed after a message is sent/received\n   * @return {void}\n   */\n  buildAfterHooks (protocol, afterHooks) {\n    if (afterHooks.send.length > 0) { protocol.prototype[this.afterSendName] = reduceHooks(afterHooks.send) }\n    if (afterHooks.receive.length > 0) { protocol.prototype[this.afterReceiveName] = reduceHooks(afterHooks.receive) }\n  }\n}\n\nmodule.exports = AbstractMethodBuilder\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/builders/abstract-method-builder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "reduceHooks",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~reduceHooks",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/builders/abstract-method-builder.js",
    "importStyle": null,
    "description": "Apply hooks on a message in reduce fashion.\nHooks may return a new message. If it's not the case, the previous message is used for the next reduce step.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "function[]"
        ],
        "spread": false,
        "optional": false,
        "name": "hooks",
        "description": "Set of hooks"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "A function that apply the set of hooks to a message"
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "AbstractMethodBuilder",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js",
    "static": true,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/fprotocol/builders/abstract-method-builder.js",
    "importStyle": "AbstractMethodBuilder",
    "description": "An AbstractBuilder defines an abstract class capable of builiding a service method.\nIt defines, in the prototype of a protocol subclass:\n* The service method, used to send messages.\n* The service handler, used to handle reception of messages for this service.\n* The service hooks, executed before/after a message is sent/recevied.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serviceName",
        "description": "The name of the service"
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "_serviceName",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#_serviceName",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "_camelCasedName",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#_camelCasedName",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "_capitalizedCamelCase",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#_capitalizedCamelCase",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "get",
    "name": "methodName",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#methodName",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "get",
    "name": "handlerName",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#handlerName",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "get",
    "name": "beforeSendName",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#beforeSendName",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "get",
    "name": "beforeReceiveName",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#beforeReceiveName",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "get",
    "name": "afterSendName",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#afterSendName",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "afterReceiveName",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#afterReceiveName",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "buildService",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#buildService",
    "access": "public",
    "description": "Build the service method used to send messages.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The protocol class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "buildHandler",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#buildHandler",
    "access": "public",
    "description": "Build the service handler",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The protocol class"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The callback used when a message is received for this service"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "buildBeforeHooks",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#buildBeforeHooks",
    "access": "public",
    "description": "Build the before hooks for this service.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The protocol class"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "beforeHooks",
        "description": "The hooks executed before a message is sent/received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "buildAfterHooks",
    "memberof": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/abstract-method-builder.js~AbstractMethodBuilder#buildAfterHooks",
    "access": "public",
    "description": "Build the after hooks for this service.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The protocol class"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "afterHooks",
        "description": "The hooks executed after a message is sent/received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/fprotocol/builders/broadcast-builder.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst AbstractMethodBuilder = require('./abstract-method-builder.js')\n\n/**\n * A builder specialized for broadcast services\n * @extends AbstractMethodBuilder\n * @author Thomas Minier\n */\nclass BroadcastBuilder extends AbstractMethodBuilder {\n  /**\n   * Build the service method used to send messages.\n   * @override\n   * @param  {function} protocol - The protocol class\n   * @return {void}\n   */\n  buildService (protocol) {\n    const method = this.methodName\n    const beforeSendHook = this.beforeSendName\n    const afterSendHook = this.afterSendName\n    protocol.prototype[method] = function (payload) {\n      const self = this\n      if (beforeSendHook in self) { payload = self[beforeSendHook](payload) }\n      const msg = {\n        protocol: self._name,\n        method,\n        payload\n      }\n      self._sendBroadcast(msg)\n      if (afterSendHook in self) { self[afterSendHook](payload) }\n    }\n  }\n}\n\nmodule.exports = BroadcastBuilder\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/builders/broadcast-builder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "class",
    "name": "BroadcastBuilder",
    "memberof": "src/fprotocol/builders/broadcast-builder.js",
    "static": true,
    "longname": "src/fprotocol/builders/broadcast-builder.js~BroadcastBuilder",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/fprotocol/builders/broadcast-builder.js",
    "importStyle": "BroadcastBuilder",
    "description": "A builder specialized for broadcast services",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "buildService",
    "memberof": "src/fprotocol/builders/broadcast-builder.js~BroadcastBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/broadcast-builder.js~BroadcastBuilder#buildService",
    "access": "public",
    "description": "Build the service method used to send messages.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The protocol class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "override": true
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/fprotocol/builders/init-builder.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\n/**\n * An InitBuilder build the _init method for a protocol prototype.\n * @author Thomas Minier\n */\nclass InitBuilder {\n  /**\n   * Constructor\n   * @param  {function} callback - The callback executed by the _init method\n   */\n  constructor (callback) {\n    this._callback = callback\n  }\n\n  /**\n   * Apply the builder on a protocol subclass to build the _init method in it.\n   * @param  {function} protocol - The protocol class\n   * @return {void}\n   */\n  apply (protocol) {\n    protocol.prototype._init = this._callback\n  }\n}\n\nmodule.exports = InitBuilder\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/builders/init-builder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "class",
    "name": "InitBuilder",
    "memberof": "src/fprotocol/builders/init-builder.js",
    "static": true,
    "longname": "src/fprotocol/builders/init-builder.js~InitBuilder",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/fprotocol/builders/init-builder.js",
    "importStyle": "InitBuilder",
    "description": "An InitBuilder build the _init method for a protocol prototype.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 107,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/fprotocol/builders/init-builder.js~InitBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/init-builder.js~InitBuilder#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback executed by the _init method"
      }
    ]
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "_callback",
    "memberof": "src/fprotocol/builders/init-builder.js~InitBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/init-builder.js~InitBuilder#_callback",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "apply",
    "memberof": "src/fprotocol/builders/init-builder.js~InitBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/init-builder.js~InitBuilder#apply",
    "access": "public",
    "description": "Apply the builder on a protocol subclass to build the _init method in it.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The protocol class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/fprotocol/builders/service-builder.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst UnicastBuilder = require('./unicast-builder.js')\nconst BroadcastBuilder = require('./broadcast-builder.js')\n\n/**\n * Error thrown when a service builder has an invalid configuration\n * @extends Error\n * @author Thomas Minier\n */\nclass ServiceBuildingError extends Error {}\n\n/**\n * A ServiceBuilder build a service into the prototype of a protocol, including the service method, the handler & the possible hooks.\n * @author Thomas Minier\n */\nclass ServiceBuilder {\n  /**\n   * Constructor\n   * @param  {string} serviceName - The name of the service\n   */\n  constructor (serviceName) {\n    this._serviceName = serviceName\n    this._builder = null\n    this._handler = null\n    this._beforeHooks = {\n      send: [],\n      receive: []\n    }\n    this._afterHooks = {\n      send: [],\n      receive: []\n    }\n  }\n\n  /**\n   * Helper used to define the type of the service.\n   * @example\n   * // define an unicast service\n   * myService.is.unicast();\n   * // define a broadcast service\n   * myService.is.broadcast();\n   * @return {Object}\n   */\n  get is () {\n    return {\n      unicast: () => { this._builder = new UnicastBuilder(this._serviceName) },\n      broadcast: () => { this._builder = new BroadcastBuilder(this._serviceName) }\n    }\n  }\n\n  /**\n   * Helper used to define the callback invoked when a message is received for this service.\n   * @example\n   * myService.on.receive((msg, reply, reject) => {\n   *  if (msg.number % 2 === 0)\n   *    reply('You send an even number');\n   *  else\n   *    reject('You send a odd number!');\n   * });\n   * @return {Object}\n   */\n  get on () {\n    return {\n      receive: callback => { this._handler = callback }\n    }\n  }\n\n  /**\n   * Helper used to define hooks executed before a message is sent/received.\n   * @example\n   * // define a hook before a message is sent\n   * mysService.before.send(msg => console.log(`You are going to send ${msg}`));\n   *\n   * // define a hook before a message is received\n   * mysService.before.receive(msg => console.log(`You are about to receive ${msg}`));\n   * @return {Object}\n   */\n  get before () {\n    return {\n      send: callback => this._beforeHooks.send.push(callback),\n      receive: callback => this._beforeHooks.receive.push(callback)\n    }\n  }\n\n  /**\n   * Helper used to define hooks executed after a message is sent/received.\n   * @example\n   * // define a hook after a message is sent\n   * mysService.after.send(msg => console.log(`You just send ${msg}`));\n   *\n   * // define a hook after a message is received\n   * mysService.after.receive(msg => console.log(`You juste finished processing ${msg}`));\n   * @return {Object}\n   */\n  get after () {\n    return {\n      send: callback => this._afterHooks.send.push(callback),\n      receive: callback => this._afterHooks.receive.push(callback)\n    }\n  }\n\n  /**\n   * Apply the builder on a protocol subclass to build the service in it.\n   * The builder must have been properly configured before calling this function, otherwise an error will be thrown.\n   * A valid builder has a type and a handler set.\n   * @param  {function} protocol - The protocol class\n   * @return {void}\n   */\n  apply (protocol) {\n    if (!this._validate()) { throw new ServiceBuildingError('') }\n    this._builder.buildService(protocol)\n    this._builder.buildHandler(protocol, this._handler)\n    this._builder.buildBeforeHooks(protocol, this._beforeHooks)\n    this._builder.buildAfterHooks(protocol, this._afterHooks)\n  }\n\n  /**\n   * Validate the builder\n   * @private\n   * @return {boolean} true if the builder is valid, False otherwise\n   */\n  _validate () {\n    return this._type !== null && this._handler !== null\n  }\n}\n\nmodule.exports = ServiceBuilder\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/builders/service-builder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "class",
    "name": "ServiceBuildingError",
    "memberof": "src/fprotocol/builders/service-builder.js",
    "static": true,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuildingError",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/builders/service-builder.js",
    "importStyle": null,
    "description": "Error thrown when a service builder has an invalid configuration",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ],
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "ServiceBuilder",
    "memberof": "src/fprotocol/builders/service-builder.js",
    "static": true,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/fprotocol/builders/service-builder.js",
    "importStyle": "ServiceBuilder",
    "description": "A ServiceBuilder build a service into the prototype of a protocol, including the service method, the handler & the possible hooks.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serviceName",
        "description": "The name of the service"
      }
    ]
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "_serviceName",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#_serviceName",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "_builder",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#_builder",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "_handler",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#_handler",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "_beforeHooks",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#_beforeHooks",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{\"send\": *, \"receive\": *}"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "_afterHooks",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#_afterHooks",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "{\"send\": *, \"receive\": *}"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "get",
    "name": "is",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#is",
    "access": "public",
    "description": "Helper used to define the type of the service.",
    "examples": [
      "// define an unicast service\nmyService.is.unicast();\n// define a broadcast service\nmyService.is.broadcast();"
    ],
    "lineNumber": 68,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"unicast\": *, \"broadcast\": *}"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "get",
    "name": "on",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#on",
    "access": "public",
    "description": "Helper used to define the callback invoked when a message is received for this service.",
    "examples": [
      "myService.on.receive((msg, reply, reject) => {\n if (msg.number % 2 === 0)\n   reply('You send an even number');\n else\n   reject('You send a odd number!');\n});"
    ],
    "lineNumber": 86,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"receive\": *}"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "get",
    "name": "before",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#before",
    "access": "public",
    "description": "Helper used to define hooks executed before a message is sent/received.",
    "examples": [
      "// define a hook before a message is sent\nmysService.before.send(msg => console.log(`You are going to send ${msg}`));\n\n// define a hook before a message is received\nmysService.before.receive(msg => console.log(`You are about to receive ${msg}`));"
    ],
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"send\": *, \"receive\": *}"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "get",
    "name": "after",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#after",
    "access": "public",
    "description": "Helper used to define hooks executed after a message is sent/received.",
    "examples": [
      "// define a hook after a message is sent\nmysService.after.send(msg => console.log(`You just send ${msg}`));\n\n// define a hook after a message is received\nmysService.after.receive(msg => console.log(`You juste finished processing ${msg}`));"
    ],
    "lineNumber": 119,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"send\": *, \"receive\": *}"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "apply",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#apply",
    "access": "public",
    "description": "Apply the builder on a protocol subclass to build the service in it.\nThe builder must have been properly configured before calling this function, otherwise an error will be thrown.\nA valid builder has a type and a handler set.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The protocol class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "_validate",
    "memberof": "src/fprotocol/builders/service-builder.js~ServiceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/service-builder.js~ServiceBuilder#_validate",
    "access": "private",
    "description": "Validate the builder",
    "lineNumber": 146,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the builder is valid, False otherwise"
    },
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/fprotocol/builders/unicast-builder.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst AbstractMethodBuilder = require('./abstract-method-builder.js')\n\n/**\n * A builder specialized for unicast services\n * @extends AbstractMethodBuilder\n * @author Thomas Minier\n */\nclass UnicastBuilder extends AbstractMethodBuilder {\n  /**\n   * Build the service method used to send messages.\n   * @override\n   * @param  {function} protocol - The protocol class\n   * @return {void}\n   */\n  buildService (protocol) {\n    const method = this.methodName\n    const beforeSendHook = this.beforeSendName\n    const afterSendHook = this.afterSendName\n    protocol.prototype[method] = function (id, payload) {\n      const self = this\n      if (beforeSendHook in self) { payload = self[beforeSendHook](payload) }\n      return new Promise(function (resolve, reject) {\n        const msg = {\n          protocol: self._name,\n          method,\n          payload\n        }\n        self._sendUnicast(id, msg, resolve, reject)\n        if (afterSendHook in self) { self[afterSendHook](payload) }\n      })\n    }\n  }\n}\n\nmodule.exports = UnicastBuilder\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/builders/unicast-builder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "UnicastBuilder",
    "memberof": "src/fprotocol/builders/unicast-builder.js",
    "static": true,
    "longname": "src/fprotocol/builders/unicast-builder.js~UnicastBuilder",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/fprotocol/builders/unicast-builder.js",
    "importStyle": "UnicastBuilder",
    "description": "A builder specialized for unicast services",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "buildService",
    "memberof": "src/fprotocol/builders/unicast-builder.js~UnicastBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/builders/unicast-builder.js~UnicastBuilder#buildService",
    "access": "public",
    "description": "Build the service method used to send messages.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The protocol class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "override": true
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/fprotocol/foglet-protocol.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst AnswerQueue = require('./answer-queue.js')\nconst utils = require('./utils.js')\n\n/**\n * FogletProtocol represent an abstract protocol.\n * A Protocol is a a set of behaviours used to interact with others foglet that shares the same protocol.\n * @abstract\n * @author Thomas Minier\n */\nclass FogletProtocol {\n  /**\n   * Constructor\n   * @param  {string} name   - The protocol's name\n   * @param  {Foglet} foglet - The Foglet instance used by the protocol to communicate\n   * @param  {...*} args - Additional arguments passed down to the `_init` function\n   */\n  constructor (name, foglet, ...args) {\n    this._name = name\n    this._foglet = foglet\n    this._answerQueue = new AnswerQueue()\n    this._initHandlers()\n    if ('_init' in this) { this._init(...args) }\n  }\n\n  /**\n   * Helper to send a unicast message\n   * @private\n   * @param  {string} id  - ID of the peer to which the message should be sent\n   * @param  {*} msg  - The message to send\n   * @param  {function} resolve - Function used to resolve a related promise when an answer to the message is received\n   * @param  {function} reject  - Function used to reject a related promise when an answer to the message is received\n   * @return {void}\n   */\n  _sendUnicast (id, msg, resolve, reject) {\n    this._foglet.sendUnicast(id, this._answerQueue.stamp(msg, resolve, reject))\n  }\n\n  /**\n   * Helper to send a broadcast message\n   * @private\n   * @param  {*} msg  - The message to send\n   * @return {void}\n   */\n  _sendBroadcast (msg) {\n    this._foglet.sendBroadcast(msg)\n  }\n\n  /**\n   * Handler which resolve answers to messages\n   * @private\n   * @param {string} id - Sender's id\n   * @param {Object} msg - Answer received\n   * @return{void}\n   */\n  _answerReply (id, msg) {\n    this._answerQueue.resolve(msg.answerID, msg.value)\n  }\n\n  /**\n   * Handler which reject answers to messages\n   * @private\n   * @param {string} id - Sender's id\n   * @param {Object} msg - Answer received\n   * @return{void}\n   */\n  _answerReject (id, msg) {\n    this._answerQueue.reject(msg.answerID, msg.value)\n  }\n\n  /**\n   * Initialize the reception of messages from unicast & broadcast channels\n   * @private\n   * @return {void}\n   */\n  _initHandlers () {\n    this._foglet.onUnicast((id, msg) => this._handleUnicast(id, msg))\n    this._foglet.onBroadcast((id, msg) => this._handleBroadcast(id, msg))\n  }\n\n  /**\n   * Handle the reception of an unicast message\n   * @private\n   * @param {string} senderID - ID of the peer who send the message\n   * @param {Object} msg - The message received\n   * @return {void}\n   */\n  _handleUnicast (senderID, msg) {\n    const handlerName = utils.handlerName(msg.method)\n    if (this._name === msg.protocol && handlerName in this) {\n      // apply before hooks\n      const beforeReceive = utils.beforeReceiveName(msg.method)\n      if (beforeReceive in this) { msg.payload = this[beforeReceive](msg.payload) }\n      // do not generate helpers for message emitted through the reply & reject helpers\n      if (msg.method !== 'answerReply' || msg.method !== 'answerReject') {\n        const reply = value => {\n          this._sendUnicast(senderID, {\n            protocol: this._name,\n            method: 'answerReply',\n            payload: {\n              answerID: msg.answerID,\n              value\n            }\n          })\n        }\n        const reject = value => {\n          this._sendUnicast(senderID, {\n            protocol: this._name,\n            method: 'answerReject',\n            payload: {\n              answerID: msg.answerID,\n              value\n            }\n          })\n        }\n        this[handlerName](senderID, msg.payload, reply, reject)\n      } else {\n        this[handlerName](senderID, msg.payload)\n      }\n      // apply after receive hook\n      const afterReceive = utils.afterReceiveName(msg.method)\n      if (afterReceive in this) { this[afterReceive](msg.payload) }\n    }\n  }\n\n  /**\n   * Handle the reception of a broadcast message\n   * @private\n   * @param {string} senderID - ID of the peer who send the message\n   * @param {Object} msg - The message received\n   * @return {void}\n   */\n  _handleBroadcast (senderID, msg) {\n    const handlerName = utils.handlerName(msg.method)\n    if (this._name === msg.protocol && handlerName in this) {\n      // apply before hooks\n      const beforeReceive = utils.beforeReceiveName(msg.method)\n      if (beforeReceive in this) { msg.payload = this[beforeReceive](msg.payload) }\n      // call handler\n      this[handlerName](senderID, msg.payload)\n      // apply after receive hook\n      const afterReceive = utils.afterReceiveName(msg.method)\n      if (afterReceive in this) { this[afterReceive](msg.payload) }\n    }\n  }\n}\n\nmodule.exports = FogletProtocol\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/foglet-protocol.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "FogletProtocol",
    "memberof": "src/fprotocol/foglet-protocol.js",
    "static": true,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/fprotocol/foglet-protocol.js",
    "importStyle": "FogletProtocol",
    "description": "FogletProtocol represent an abstract protocol.\nA Protocol is a a set of behaviours used to interact with others foglet that shares the same protocol.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The protocol's name"
      },
      {
        "nullable": null,
        "types": [
          "Foglet"
        ],
        "spread": false,
        "optional": false,
        "name": "foglet",
        "description": "The Foglet instance used by the protocol to communicate"
      },
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Additional arguments passed down to the `_init` function"
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "_name",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_name",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "_foglet",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_foglet",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "_answerQueue",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_answerQueue",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "_sendUnicast",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_sendUnicast",
    "access": "private",
    "description": "Helper to send a unicast message",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the peer to which the message should be sent"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message to send"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "resolve",
        "description": "Function used to resolve a related promise when an answer to the message is received"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "reject",
        "description": "Function used to reject a related promise when an answer to the message is received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "_sendBroadcast",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_sendBroadcast",
    "access": "private",
    "description": "Helper to send a broadcast message",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "_answerReply",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_answerReply",
    "access": "private",
    "description": "Handler which resolve answers to messages",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Sender's id"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Answer received\n@return{void}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "_answerReject",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_answerReject",
    "access": "private",
    "description": "Handler which reject answers to messages",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Sender's id"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Answer received\n@return{void}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "_initHandlers",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_initHandlers",
    "access": "private",
    "description": "Initialize the reception of messages from unicast & broadcast channels",
    "lineNumber": 100,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "_handleUnicast",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_handleUnicast",
    "access": "private",
    "description": "Handle the reception of an unicast message",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "senderID",
        "description": "ID of the peer who send the message"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "_handleBroadcast",
    "memberof": "src/fprotocol/foglet-protocol.js~FogletProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/fprotocol/foglet-protocol.js~FogletProtocol#_handleBroadcast",
    "access": "private",
    "description": "Handle the reception of a broadcast message",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "senderID",
        "description": "ID of the peer who send the message"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/fprotocol/protocol-builder.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst FogletProtocol = require('./foglet-protocol.js')\nconst ServiceBuilder = require('./builders/service-builder.js')\nconst InitBuilder = require('./builders/init-builder.js')\n\n/**\n * Create a function that evaluates a tagged template to create a new subclass of {@link FogletProtocol}\n * that implements the protocol described in the template.\n * @param  {string} protocolName - The name of the protocol\n * @return {function} A function that evaluates a tagged template to create a new subclass of {@link FogletProtocol}\n * @example\n * const ExampleUnicastProtocol = defineProtocol('example-unicast-protocol')`\n *  init\n *  ${function (base) {\n *    this._base = base;\n *  }}\n *  get\n *  ${function(service) {\n *    service.is.unicast();\n *    service.on.receive(function (id, msg, reply, reject) {\n *      if (msg.number % this._base === 0)\n *        reply(`${msg.number} is a multiple of ${this._base}`);\n *      else\n *        reject(`${msg.number} is not a multiple of ${this._base}`);\n *    });\n *  }}\n *  `;\n *\n * module.exports = ExampleUnicastProtocol;\n */\nfunction define (protocolName) {\n  return function (services, ...callbacks) {\n    let builder\n    const protocolClass = class extends FogletProtocol {\n      constructor (foglet, ...args) {\n        super(protocolName, foglet, ...args)\n      }\n    }\n    // clean services names before building\n    services.map(str => str.trim())\n      .filter(str => str.length > 0)\n      .forEach((name, index) => {\n        if (name === 'init' || name === 'constructor') {\n          builder = new InitBuilder(callbacks[index])\n        } else {\n          builder = new ServiceBuilder(name)\n          callbacks[index](builder)\n        }\n        builder.apply(protocolClass)\n      })\n    return protocolClass\n  }\n}\n\nmodule.exports = define\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/protocol-builder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "define",
    "memberof": "src/fprotocol/protocol-builder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/protocol-builder.js~define",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/fprotocol/protocol-builder.js",
    "importStyle": "define",
    "description": "Create a function that evaluates a tagged template to create a new subclass of {@link FogletProtocol}\nthat implements the protocol described in the template.",
    "examples": [
      "const ExampleUnicastProtocol = defineProtocol('example-unicast-protocol')`\n init\n ${function (base) {\n   this._base = base;\n }}\n get\n ${function(service) {\n   service.is.unicast();\n   service.on.receive(function (id, msg, reply, reject) {\n     if (msg.number % this._base === 0)\n       reply(`${msg.number} is a multiple of ${this._base}`);\n     else\n       reject(`${msg.number} is not a multiple of ${this._base}`);\n   });\n }}\n `;\n\nexport default ExampleUnicastProtocol;"
    ],
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protocolName",
        "description": "The name of the protocol"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "A function that evaluates a tagged template to create a new subclass of {@link FogletProtocol}"
    }
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/fprotocol/utils.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst camelCase = str => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (letter, index) => {\n    return index === 0 ? letter.toLowerCase() : letter.toUpperCase()\n  }).replace(/\\s+/g, '')\n}\n\nconst capitalize = str => {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\n/**\n * Get the name of a service method\n * @private\n */\nconst methodName = method => {\n  return camelCase(method)\n}\n\n/**\n * Get the name of a handler\n * @private\n */\nconst handlerName = method => {\n  return `_${camelCase(method)}`\n}\n\n/**\n * Get the name of a before hook for a service method\n * @private\n */\nconst beforeSendName = method => {\n  return `_beforeSend${capitalize(camelCase(method))}`\n}\n\n/**\n * Get the name of a before hook for a handler\n * @private\n */\nconst beforeReceiveName = method => {\n  return `_beforeReceive${capitalize(camelCase(method))}`\n}\n\n/**\n * Get the name of a before hook for a service method\n * @private\n */\nconst afterSendName = method => {\n  return `_afterSend${capitalize(camelCase(method))}`\n}\n\n/**\n * Get the name of an after hook for a handler\n * @private\n */\nconst afterReceiveName = method => {\n  return `_afterReceive${capitalize(camelCase(method))}`\n}\n\nmodule.exports = {\n  camelCase,\n  capitalize,\n  methodName,\n  handlerName,\n  beforeSendName,\n  beforeReceiveName,\n  afterSendName,\n  afterReceiveName\n}\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/fprotocol/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "camelCase",
    "memberof": "src/fprotocol/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/utils.js~camelCase",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "capitalize",
    "memberof": "src/fprotocol/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/utils.js~capitalize",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "methodName",
    "memberof": "src/fprotocol/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/utils.js~methodName",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/utils.js",
    "importStyle": null,
    "description": "Get the name of a service method",
    "lineNumber": 40,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "handlerName",
    "memberof": "src/fprotocol/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/utils.js~handlerName",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/utils.js",
    "importStyle": null,
    "description": "Get the name of a handler",
    "lineNumber": 48,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "beforeSendName",
    "memberof": "src/fprotocol/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/utils.js~beforeSendName",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/utils.js",
    "importStyle": null,
    "description": "Get the name of a before hook for a service method",
    "lineNumber": 56,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "beforeReceiveName",
    "memberof": "src/fprotocol/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/utils.js~beforeReceiveName",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/utils.js",
    "importStyle": null,
    "description": "Get the name of a before hook for a handler",
    "lineNumber": 64,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "afterSendName",
    "memberof": "src/fprotocol/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/utils.js~afterSendName",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/utils.js",
    "importStyle": null,
    "description": "Get the name of a before hook for a service method",
    "lineNumber": 72,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "afterReceiveName",
    "memberof": "src/fprotocol/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fprotocol/utils.js~afterReceiveName",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/fprotocol/utils.js",
    "importStyle": null,
    "description": "Get the name of an after hook for a handler",
    "lineNumber": 80,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/network/abstract/abstract-network.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst EventEmitter = require('events')\n\n/**\n * AbstractNetwork represents an abstract network layer\n * @abstract\n * @author Grall Arnaud (Folkvir)\n */\nclass AbstractNetwork extends EventEmitter {\n  /**\n   * Constructor\n   * @param {Object} options - Additional options used to build the network\n   */\n  constructor (options) {\n    super()\n    this._rps = this._buildRPS(options)\n    this._options = options\n    // make a unique id of this network\n    this._id = this._rps.PEER\n  }\n  /**\n   * Return a unique identifier of the peer\n   * @return {String} The identifier of the peer\n   */\n  get id () {\n    return this._id\n  }\n\n  /**\n   * The Random Peer Sampling Network itself\n   * @return {*} The Random Peer Sampling Network\n   */\n  get rps () {\n    return this._rps\n  }\n\n  /**\n   * The in-view ID of the peer in the network\n   * @return {string} The in-view ID of the peer\n   */\n  get inviewId () {\n    throw new Error('A valid network must implement a inviewId getter')\n  }\n\n  /**\n   * The out-view ID of the peer in the network\n   * @return {string} The out-view ID of the peer\n   */\n  get outviewId () {\n    throw new Error('A valid network must implement a outviewId getter')\n  }\n\n  /**\n   * Build the RPS for this network.\n   * Subclasses of {@link AbstractNetwork} **must** implement this method.\n   * @param {Object} options - Options used to build the RPS\n   * @return {*} The network used as RPS/overlay\n   */\n  _buildRPS (options) {\n    throw new Error('A valid network must implement a _buildRPS method using options', options)\n  }\n\n  /**\n   * Get the IDs of all available neighbours\n   * @param  {integer} limit - Max number of neighbours to look for\n   * @return {string[]} Set of IDs for all available neighbours\n   */\n  getNeighbours (limit) {\n    throw new Error('A valid network must implement a getNeighbours method with limit', limit)\n  }\n}\n\nmodule.exports = AbstractNetwork\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/abstract/abstract-network.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "class",
    "name": "AbstractNetwork",
    "memberof": "src/network/abstract/abstract-network.js",
    "static": true,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/abstract/abstract-network.js",
    "importStyle": "AbstractNetwork",
    "description": "AbstractNetwork represents an abstract network layer",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Grall Arnaud (Folkvir)"
      }
    ],
    "abstract": true,
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 157,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Additional options used to build the network"
      }
    ]
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "_rps",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#_rps",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "_options",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#_options",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "_id",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#_id",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "get",
    "name": "id",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#id",
    "access": "public",
    "description": "Return a unique identifier of the peer",
    "lineNumber": 49,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The identifier of the peer"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "get",
    "name": "rps",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#rps",
    "access": "public",
    "description": "The Random Peer Sampling Network itself",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The Random Peer Sampling Network"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "get",
    "name": "inviewId",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#inviewId",
    "access": "public",
    "description": "The in-view ID of the peer in the network",
    "lineNumber": 65,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The in-view ID of the peer"
    },
    "type": null
  },
  {
    "__docId__": 164,
    "kind": "get",
    "name": "outviewId",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#outviewId",
    "access": "public",
    "description": "The out-view ID of the peer in the network",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The out-view ID of the peer"
    },
    "type": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "_buildRPS",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#_buildRPS",
    "access": "private",
    "description": "Build the RPS for this network.\nSubclasses of {@link AbstractNetwork} **must** implement this method.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options used to build the RPS"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The network used as RPS/overlay"
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "getNeighbours",
    "memberof": "src/network/abstract/abstract-network.js~AbstractNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/abstract-network.js~AbstractNetwork#getNeighbours",
    "access": "public",
    "description": "Get the IDs of all available neighbours",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Max number of neighbours to look for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    }
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/network/abstract/abstract-overlay.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst AbstractNetwork = require('./abstract-network.js')\n\n/**\n * AbstractOverlay represents an abstract overlay\n * @abstract\n * @deprecated This class is awaiting imminent DOOOM, please use {@link TManOverlay} instead\n * @extends AbstractNetwork\n * @author Grall Arnaud (Folkvir)\n */\nclass AbstractOverlay extends AbstractNetwork {\n  constructor (options) {\n    super(options)\n    if (!options.manager) {\n      // NEED A BASE (a RPS or an another overlay)\n      throw new SyntaxError('Need the manager to access to other networks.')\n    }\n    this.manager = options.manager\n  }\n}\n\nmodule.exports = AbstractOverlay\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/abstract/abstract-overlay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "AbstractOverlay",
    "memberof": "src/network/abstract/abstract-overlay.js",
    "static": true,
    "longname": "src/network/abstract/abstract-overlay.js~AbstractOverlay",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/abstract/abstract-overlay.js",
    "importStyle": "AbstractOverlay",
    "description": "AbstractOverlay represents an abstract overlay",
    "lineNumber": 35,
    "deprecated": "This class is awaiting imminent DOOOM, please use {@link TManOverlay} instead",
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Grall Arnaud (Folkvir)"
      }
    ],
    "abstract": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/abstract/abstract-overlay.js~AbstractOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/abstract-overlay.js~AbstractOverlay#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "manager",
    "memberof": "src/network/abstract/abstract-overlay.js~AbstractOverlay",
    "static": false,
    "longname": "src/network/abstract/abstract-overlay.js~AbstractOverlay#manager",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/network/abstract/tman-overlay.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst AbstractNetwork = require('./abstract-network.js')\nconst TMan = require('tman-wrtc')\nconst lmerge = require('lodash.merge')\n\n/**\n * A TManOverlay is an abstract network used to build overlay based on the TMan network over WebRTC.\n * @see https://github.com/RAN3D/tman-wrtc for more informations on TMan.\n * @abstract\n * @extends AbstractOverlay\n * @author Thomas Minier\n */\nclass TManOverlay extends AbstractNetwork {\n  /**\n   * Constructor\n   * @param {Object} options - Additional options used to build the network\n   * @return {NetworkManager} networkManager - Network manager used as root for the overlay\n   */\n  constructor (networkManager, options) {\n    options.manager = networkManager\n    super(options)\n    this._manager = networkManager\n    this._rps.parent.once('open', () => {\n      console.log('SON connected')\n      this._rps._start()\n    })\n  }\n\n  /**\n   * The in-view ID of the peer in the network\n   * @return {string} The in-view ID of the peer\n   */\n  get inviewId () {\n    return this.rps.getInviewId()\n  }\n\n  /**\n   * The out-view ID of the peer in the network\n   * @return {string} The out-view ID of the peer\n   */\n  get outviewId () {\n    return this.rps.getOutviewId()\n  }\n\n  /**\n   * Get our current descriptor\n   * @return {Object} The peer current descriptor\n   */\n  get descriptor () {\n    return this._rps.options.descriptor\n  }\n\n  /**\n   * Update the peer descriptor\n   * @param  {Object} newDescriptor - The new descriptor\n   * @return {void}\n   */\n  set descriptor (newDescriptor) {\n    this._rps.options.descriptor = newDescriptor\n  }\n\n  /**\n   * Build a TMan network\n   * @param {Object} options - Options used to build the TMan\n   * @return {TMan} The TMan network\n   */\n  _buildRPS (options) {\n    // if webrtc options specified: create object config for Spray\n    this.options = lmerge({config: options.webrtc}, options)\n    const tmanOptions = lmerge({\n      descriptor: this._startDescriptor(),\n      descriptorTimeout: this._descriptorTimeout(),\n      ranking: this._rankingFunction()\n    }, this.options)\n    return new TMan(tmanOptions, options.manager._rps._network._rps)\n  }\n\n  /**\n   * Gives the start descriptor used by the TMan overlay (can be an empty object).\n   * Subclasses of {@link TManOverlay} **must** implement this method.\n   * @return {Object} The start descriptor used by the TMan overlay\n   */\n  _startDescriptor () {\n    throw new Error('A valid TMan based overlay must implement a _descriptor method to generate a base descriptor')\n  }\n\n  /**\n   * Give the delay **in milliseconds** after which the descriptor must be recomputed.\n   * Subclasses of {@link TManOverlay} **must** implement this method.\n   * @return {number} The delay **in milliseconds** after which the descriptor must be recomputed\n   */\n  _descriptorTimeout () {\n    throw new Error('A valid TMan based overlay must implement a _descriptorTimeout method to give the timeout on descriptors')\n  }\n\n  /**\n   * Compare two peers and rank them according to a ranking function.\n   * This function must return `0 if peerA == peerB`, `1 if peerA < peerB` and `-1 if peerA > peerB`.\n   *\n   * Subclasses of {@link TManOverlay} **must** implement this method.\n   * @param {*} neighbour - The neighbour to rank with\n   * @param {Object} descriptorA - Descriptor of the first peer\n   * @param {Object} descriptorB - Descriptor of the second peer\n   * @param {TManOverlay} peerA - (optional) The overlay of the first peer\n   * @param {TManOverlay} peerB - (optional) The overlay of the second peer\n   * @return {integer} `0 if peerA == peerB`, `1 if peerA < peerB` and `-1 if peerA > peerB` (according to the ranking algorithm)\n   */\n  _rankPeers (neighbour, descriptorA, descriptorB, peerA, peerB) {\n    throw new Error('A valid TMan based overlay must implement a _rankPeers method to rank two peers' + `variable: ${neighbour.toString()}${descriptorA.toString()}${descriptorB.toString()}${peerA.toString()}${peerB.toString()}`)\n  }\n\n  /**\n   * Utility to rank two peers\n   * @private\n   */\n  _rankingFunction () {\n    return peer => (a, b) => this._rankPeers(peer, a.descriptor, b.descriptor, a, b)\n  }\n\n  /**\n   * Get the IDs of all available neighbours\n   * @param  {integer} limit - Max number of neighbours to look for\n   * @return {string[]} Set of IDs for all available neighbours\n   */\n  getNeighbours (limit) {\n    return this.rps.getPeers(limit)\n  }\n}\n\nmodule.exports = TManOverlay\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/abstract/tman-overlay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "TManOverlay",
    "memberof": "src/network/abstract/tman-overlay.js",
    "static": true,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/abstract/tman-overlay.js",
    "importStyle": "TManOverlay",
    "description": "A TManOverlay is an abstract network used to build overlay based on the TMan network over WebRTC.",
    "see": [
      "https://github.com/RAN3D/tman-wrtc for more informations on TMan."
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "abstract": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 173,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Additional options used to build the network"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NetworkManager"
      ],
      "spread": false,
      "description": "networkManager - Network manager used as root for the overlay"
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "_manager",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#_manager",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "get",
    "name": "inviewId",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#inviewId",
    "access": "public",
    "description": "The in-view ID of the peer in the network",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The in-view ID of the peer"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "get",
    "name": "outviewId",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#outviewId",
    "access": "public",
    "description": "The out-view ID of the peer in the network",
    "lineNumber": 65,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The out-view ID of the peer"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "get",
    "name": "descriptor",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#descriptor",
    "access": "public",
    "description": "Get our current descriptor",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The peer current descriptor"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "set",
    "name": "descriptor",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#descriptor",
    "access": "public",
    "description": "Update the peer descriptor",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newDescriptor",
        "description": "The new descriptor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "_buildRPS",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#_buildRPS",
    "access": "private",
    "description": "Build a TMan network",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options used to build the TMan"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TMan"
      ],
      "spread": false,
      "description": "The TMan network"
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "options",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#options",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "_startDescriptor",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#_startDescriptor",
    "access": "private",
    "description": "Gives the start descriptor used by the TMan overlay (can be an empty object).\nSubclasses of {@link TManOverlay} **must** implement this method.",
    "lineNumber": 107,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The start descriptor used by the TMan overlay"
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "_descriptorTimeout",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#_descriptorTimeout",
    "access": "private",
    "description": "Give the delay **in milliseconds** after which the descriptor must be recomputed.\nSubclasses of {@link TManOverlay} **must** implement this method.",
    "lineNumber": 116,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The delay **in milliseconds** after which the descriptor must be recomputed"
    },
    "params": []
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "_rankPeers",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#_rankPeers",
    "access": "private",
    "description": "Compare two peers and rank them according to a ranking function.\nThis function must return `0 if peerA == peerB`, `1 if peerA < peerB` and `-1 if peerA > peerB`.\n\nSubclasses of {@link TManOverlay} **must** implement this method.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "neighbour",
        "description": "The neighbour to rank with"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "descriptorA",
        "description": "Descriptor of the first peer"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "descriptorB",
        "description": "Descriptor of the second peer"
      },
      {
        "nullable": null,
        "types": [
          "TManOverlay"
        ],
        "spread": false,
        "optional": false,
        "name": "peerA",
        "description": "(optional) The overlay of the first peer"
      },
      {
        "nullable": null,
        "types": [
          "TManOverlay"
        ],
        "spread": false,
        "optional": false,
        "name": "peerB",
        "description": "(optional) The overlay of the second peer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": "`0 if peerA == peerB`, `1 if peerA < peerB` and `-1 if peerA > peerB` (according to the ranking algorithm)"
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "_rankingFunction",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#_rankingFunction",
    "access": "private",
    "description": "Utility to rank two peers",
    "lineNumber": 140,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "getNeighbours",
    "memberof": "src/network/abstract/tman-overlay.js~TManOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/abstract/tman-overlay.js~TManOverlay#getNeighbours",
    "access": "public",
    "description": "Get the IDs of all available neighbours",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Max number of neighbours to look for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/network/communication/abstract/abstract-broadcast.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst CommunicationProtocol = require('./communication-protocol.js')\nconst Unicast = require('./../unicast/unicast.js')\n\n/**\n * AbstractBroadcast represents an abstract broadcast protocol.\n * @abstract\n * @extends CommunicationProtocol\n * @author Thomas Minier\n */\nclass AbstractBroadcast extends CommunicationProtocol {\n  /**\n   * Constructor\n   * @param  {AbstractNetwork} source - The source RPS/overlay\n   * @param  {string} protocol - The name of the broadcast protocol\n   */\n  constructor (source, protocol) {\n    super(source, `foglet-broadcast-protocol-${protocol}`)\n    this._unicast = new Unicast(this._source, this._protocol)\n    this._unicast.on('receive', (id, message) => {\n      this._receive(id, message)\n    })\n  }\n}\n\nmodule.exports = AbstractBroadcast\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/abstract/abstract-broadcast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "AbstractBroadcast",
    "memberof": "src/network/communication/abstract/abstract-broadcast.js",
    "static": true,
    "longname": "src/network/communication/abstract/abstract-broadcast.js~AbstractBroadcast",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/communication/abstract/abstract-broadcast.js",
    "importStyle": "AbstractBroadcast",
    "description": "AbstractBroadcast represents an abstract broadcast protocol.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "abstract": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 188,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/communication/abstract/abstract-broadcast.js~AbstractBroadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/abstract/abstract-broadcast.js~AbstractBroadcast#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractNetwork"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The source RPS/overlay"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The name of the broadcast protocol"
      }
    ]
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_unicast",
    "memberof": "src/network/communication/abstract/abstract-broadcast.js~AbstractBroadcast",
    "static": false,
    "longname": "src/network/communication/abstract/abstract-broadcast.js~AbstractBroadcast#_unicast",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/network/communication/abstract/abstract-unicast.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst CommunicationProtocol = require('./communication-protocol.js')\n\n/**\n * AbstractUnicast represents an abstract unicast protocol.\n * @abstract\n * @extends CommunicationProtocol\n * @author Thomas Minier\n */\nclass AbstractUnicast extends CommunicationProtocol {\n  /**\n   * Constructor\n   * @param  {AbstractNetwork} source - The source RPS/overlay\n   * @param  {string} protocol - The name of the unicast protocol\n   */\n  constructor (source, protocol) {\n    super(source, `foglet-unicast-protocol-${protocol}`)\n  }\n}\n\nmodule.exports = AbstractUnicast\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/abstract/abstract-unicast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "AbstractUnicast",
    "memberof": "src/network/communication/abstract/abstract-unicast.js",
    "static": true,
    "longname": "src/network/communication/abstract/abstract-unicast.js~AbstractUnicast",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/communication/abstract/abstract-unicast.js",
    "importStyle": "AbstractUnicast",
    "description": "AbstractUnicast represents an abstract unicast protocol.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "abstract": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 192,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/communication/abstract/abstract-unicast.js~AbstractUnicast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/abstract/abstract-unicast.js~AbstractUnicast#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractNetwork"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The source RPS/overlay"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The name of the unicast protocol"
      }
    ]
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/network/communication/abstract/communication-protocol.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst EventEmitter = require('events')\n\n/**\n * CommunicationProtocol represents an abstract communication protocol.\n * @abstract\n * @extends EventEmitter\n * @author Thomas Minier\n */\nclass CommunicationProtocol extends EventEmitter {\n  /**\n   * Constructor\n   * @param  {AbstractNetwork} source - The source RPS/overlay\n   * @param  {string} protocol - The name of the broadcast protocol\n   */\n  constructor (source, protocol) {\n    super()\n    this._source = source\n    this._protocol = protocol\n  }\n  /**\n   * Send a message\n   * @param  {Object}  message  - The message to send\n   * @return {boolean}\n   */\n  send (message) {\n    throw new Error('A valid communication protocol should implement a send method, message:' + message.toString())\n  }\n\n  /**\n   * Handler executed when a message is recevied\n   * @param  {string} id  - Message issuer's ID\n   * @param  {Object} message - The message received\n   * @return {void}\n   */\n  _receive (id, message) {\n    throw new Error('A valid communication protocol should implement a _receiveMessage method; ' + `(id, message)=(${id.toString()},${message.toString()})`)\n  }\n}\n\nmodule.exports = CommunicationProtocol\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/abstract/communication-protocol.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "CommunicationProtocol",
    "memberof": "src/network/communication/abstract/communication-protocol.js",
    "static": true,
    "longname": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/communication/abstract/communication-protocol.js",
    "importStyle": "CommunicationProtocol",
    "description": "CommunicationProtocol represents an abstract communication protocol.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "abstract": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractNetwork"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The source RPS/overlay"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The name of the broadcast protocol"
      }
    ]
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "_source",
    "memberof": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol",
    "static": false,
    "longname": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol#_source",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "_protocol",
    "memberof": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol",
    "static": false,
    "longname": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol#_protocol",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "send",
    "memberof": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol#send",
    "access": "public",
    "description": "Send a message",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_receive",
    "memberof": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/abstract/communication-protocol.js~CommunicationProtocol#_receive",
    "access": "private",
    "description": "Handler executed when a message is recevied",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Message issuer's ID"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/network/communication/broadcast/broadcast.js",
    "content": "/*\nThis broadcast implementation  is clearly inspired from https://github.com/Chat-Wane/CausalBroadcastDefinition\nThis is a causal broadcast customizable, if you want to specifiy\n*/\n'use strict'\n\nconst AbstractBroadcast = require('./../abstract/abstract-broadcast.js')\nconst VVwE = require('version-vector-with-exceptions') // Version-Vector With Exceptions\nconst messages = require('./messages.js')\n\nconst uuid = require('uuid/v4')\nconst sortedIndexBy = require('lodash.sortedindexby')\nconst debug = (require('debug'))('foglet-core:broadcast')\n\n/**\n * Format the IDs of messages in string format\n * @param  {Obbject} message - The message to format\n * @return {string} The formatted message's id in string format\n */\nfunction formatID (message) {\n  return `e=${message.id.e}&c=${message.id.c}`\n}\n\n/**\n * Broadcast represent the base implementation of a broadcast protocol for the foglet library.\n * Based on the CausalBrodacastDefinition Package: see: https://github.com/Chat-Wane/CausalBroadcastDefinition\n * @extends AbstractBroadcast\n * @author Arnaud Grall (Folkvir)\n */\nclass Broadcast extends AbstractBroadcast {\n  /**\n   * Constructor\n   * @param  {AbstractNetwork} source - The source RPS/overlay\n   * @param  {string} protocol - The name of the broadcast protocol\n   */\n  constructor (source, protocol) {\n    super(source, protocol)\n    if (source && protocol) {\n      this.options = {\n        id: source._options.peer,\n        delta: 1000 * 30\n      }\n      // the id is your id, base on the .PEER id in the RPS options\n      this._causality = new VVwE(this.options.id)\n      // buffer of received messages\n      this._buffer = []\n      // buffer of anti-entropy messages (chunkified because of large size)\n      this._bufferAntiEntropy = messages.MAntiEntropyResponse('init')\n    } else {\n      return new Error('Not enough parameters', 'fbroadcast.js')\n    }\n  }\n\n  /**\n   * Send a message to all neighbours\n   * @private\n   * @param  {Object} message - The message to send\n   * @return {void}\n   */\n  _sendAll (message) {\n    const n = this._source.getNeighbours(Infinity)\n    if (n.length > 0) {\n      n.forEach(p => {\n        this._unicast.send(p, message).catch(e => {\n          debug(e)\n        })\n      })\n    }\n  }\n\n  /**\n   * Send a message in broadcast\n   * @param  {Object}  message  - The message to send\n   * @param  {Object} [id] {e: <stringId>, c: <Integer>} this uniquely represents the id of the operation\n   * @param  {Object} [isReady] {e: <stringId>, c: <Integer>} this uniquely represents the id of the operation that we must wait before delivering the message\n   * @return {boolean}\n   */\n  send (message, id, isReady = undefined) {\n    const a = id || this._causality.increment()\n    const broadcastMessage = messages.BroadcastMessage(this._protocol, a, isReady, message)\n    // #2 register the message in the structure\n    this._causality.incrementFrom(a)\n\n    // #3 send the message to the neighborhood\n    this._sendAll(broadcastMessage)\n    return a\n  }\n\n  /**\n   * We started Antientropy mechanism in order to retreive old missed files\n   */\n  startAntiEntropy (delta = this.options.delta) {\n    this._intervalAntiEntropy = setInterval(() => {\n      this._source.getNeighbours().forEach(peer => this._unicast.send(peer, messages.MAntiEntropyRequest(this._causality)))\n    }, delta)\n\n    this.on('antiEntropy', (id, messageCausality, ourCausality) => this._defaultBehaviorAntiEntropy(id, messageCausality, ourCausality))\n  }\n\n  /**\n   * This callback depends on the type of the applications, this is the default behavior when you receive old missed files\n   */\n  _defaultBehaviorAntiEntropy (id, messageCausality, ourCausality) {\n    debug('(Warning) You should modify this, AntiEntropy default behavior: ', id, messageCausality, ourCausality)\n  }\n\n  /**\n   * Clear the AntiEntropy mechanism\n   */\n  clearAntiEntropy () {\n    if (this._intervalAntiEntropy) clearInterval(this._intervalAntiEntropy)\n  }\n\n  /**\n   * Send entropy response\n   * @deprecated\n   * @param  {[type]} origin             [description]\n   * @param  {[type]} causalityAtReceipt [description]\n   * @param  {[type]} elements           [description]\n   * @return {[type]}                    [description]\n   */\n  sendAntiEntropyResponse (origin, causalityAtReceipt, elements) {\n    let id = uuid()\n    // #1 metadata of the antientropy response\n    let sent = this._unicast.send(origin, messages.MAntiEntropyResponse(id, causalityAtReceipt, elements.length))\n    let i = 0\n    while (sent && i < elements.length) {\n      sent = this._unicast.send(origin, messages.MAntiEntropyResponse(id, null, elements.length, elements[i]))\n      ++i\n    }\n  }\n\n  /**\n   * Handler executed when a message is recevied\n   * @param  {string} id  - Message issuer's ID\n   * @param  {Object} message - The message received\n   * @return {void}\n   */\n  _receive (id, message) {\n    // if not present, add the issuer of the message in the message\n    if (!('issuer' in message)) { message.issuer = id }\n\n    switch (message.type) {\n      case 'MAntiEntropyRequest': {\n        debug(id, message)\n        this.emit('antiEntropy', id, message.causality, this._causality.clone())\n        break\n      }\n      case 'MAntiEntropyResponse': {\n      // #A replace the buffered message\n        if (this._bufferAntiEntropy.id !== message.id) {\n          this._bufferAntiEntropy = message\n        }\n        // #B add the new element to the buffer\n        if (message.element) {\n          this._bufferAntiEntropy.elements.push(message.element)\n        }\n        // #C add causality metadata\n        if (message.causality) {\n          this._bufferAntiEntropy.causality = message.causality\n        }\n        // #D the buffered message is fully arrived, deliver\n        if (this._bufferAntiEntropy.elements.length ===\n          this._bufferAntiEntropy.nbElements) {\n        // #1 considere each message in the response independantly\n          for (let i = 0; i < this._bufferAntiEntropy.elements.length; ++i) {\n            let element = this._bufferAntiEntropy.elements[i]\n            // #2 only check if the message has not been received yet\n            if (!this._shouldStopPropagation(element)) {\n              this._causality.incrementFrom(element.id)\n              this.emit('receive', message.issuer, element.payload)\n            }\n          }\n          // #3 merge causality structures\n          this._causality.merge(this._bufferAntiEntropy.causality)\n        }\n        break\n      }\n\n      default: {\n        if (!this._shouldStopPropagation(message)) {\n        // #1 register the operation\n        // maintain `this._buffer` sorted to search in O(log n)\n          const index = sortedIndexBy(this._buffer, message, formatID)\n          this._buffer.splice(index, 0, message)\n          // #2 deliver\n          this._reviewBuffer()\n          // #3 rebroadcast\n          this._sendAll(message)\n        }\n        break\n      }\n    }\n  }\n\n  /**\n   * Check if a message should be propagated or not\n   * @private\n   * @param  {Object} message - The message to check\n   * @return {boolean} True if the message should not be propagated, False if it should be.\n   */\n  _shouldStopPropagation (message) {\n    return this._causality.isLower(message.id) || (this._findInBuffer(formatID(message)) >= 0)\n  }\n\n  /**\n   * Try to find the index of a message in the internal buffer\n   * @private\n   * @param  {string} id - Message's ID\n   * @return {int} The index of the message in the buffer, or -1 if not found\n   */\n  _findInBuffer (id) {\n    // use a binary search algorithm since `this._buffer` is sorted by IDs\n    let minIndex = 0\n    let maxIndex = this._buffer.length - 1\n    let currentIndex, currentElement\n\n    while (minIndex <= maxIndex) {\n      currentIndex = (minIndex + maxIndex) / 2 | 0\n      currentElement = formatID(this._buffer[currentIndex])\n\n      if (currentElement < id) {\n        minIndex = currentIndex + 1\n      } else if (currentElement > id) {\n        maxIndex = currentIndex - 1\n      } else {\n        return currentIndex\n      }\n    }\n    return -1\n  }\n\n  /**\n   * Scan internal buffer to deliver waiting messages\n   * @private\n   * @return {void}\n   */\n  _reviewBuffer () {\n    let message\n    let found = false\n    for (let index = this._buffer.length - 1; index >= 0; --index) {\n      message = this._buffer[index]\n      if (this._causality.isLower(message.id)) {\n        this._buffer.splice(index, 1)\n      } else {\n        // console.log(message, this._causality.isReady(message.isReady), this._causality);\n        if (this._causality.isReady(message.isReady)) {\n          found = true\n          this._causality.incrementFrom(message.id)\n          this._buffer.splice(index, 1)\n          this.emit('receive', message.issuer, message.payload)\n        }\n      }\n    }\n    if (found) {\n      this._reviewBuffer()\n    }\n  }\n}\n\nmodule.exports = Broadcast\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/broadcast/broadcast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/network/communication/broadcast/broadcast.js",
    "static": true,
    "longname": "src/network/communication/broadcast/broadcast.js~debug",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/communication/broadcast/broadcast.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "formatID",
    "memberof": "src/network/communication/broadcast/broadcast.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/network/communication/broadcast/broadcast.js~formatID",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/communication/broadcast/broadcast.js",
    "importStyle": null,
    "description": "Format the IDs of messages in string format",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Obbject"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The formatted message's id in string format"
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "Broadcast",
    "memberof": "src/network/communication/broadcast/broadcast.js",
    "static": true,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/communication/broadcast/broadcast.js",
    "importStyle": "Broadcast",
    "description": "Broadcast represent the base implementation of a broadcast protocol for the foglet library.\nBased on the CausalBrodacastDefinition Package: see: https://github.com/Chat-Wane/CausalBroadcastDefinition",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Arnaud Grall (Folkvir)"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractNetwork"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The source RPS/overlay"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The name of the broadcast protocol"
      }
    ]
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "options",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#options",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "{\"id\": *, \"delta\": *}"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "_causality",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_causality",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "_buffer",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_buffer",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "_bufferAntiEntropy",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_bufferAntiEntropy",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_sendAll",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_sendAll",
    "access": "private",
    "description": "Send a message to all neighbours",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "send",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#send",
    "access": "public",
    "description": "Send a message in broadcast",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to send"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "id",
        "description": "{e: <stringId>, c: <Integer>} this uniquely represents the id of the operation"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "isReady",
        "description": "{e: <stringId>, c: <Integer>} this uniquely represents the id of the operation that we must wait before delivering the message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "startAntiEntropy",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#startAntiEntropy",
    "access": "public",
    "description": "We started Antientropy mechanism in order to retreive old missed files",
    "lineNumber": 92,
    "params": [
      {
        "name": "delta",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "_intervalAntiEntropy",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_intervalAntiEntropy",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "_defaultBehaviorAntiEntropy",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_defaultBehaviorAntiEntropy",
    "access": "private",
    "description": "This callback depends on the type of the applications, this is the default behavior when you receive old missed files",
    "lineNumber": 103,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "messageCausality",
        "types": [
          "*"
        ]
      },
      {
        "name": "ourCausality",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "clearAntiEntropy",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#clearAntiEntropy",
    "access": "public",
    "description": "Clear the AntiEntropy mechanism",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "sendAntiEntropyResponse",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#sendAntiEntropyResponse",
    "access": "public",
    "description": "Send entropy response",
    "lineNumber": 122,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "causalityAtReceipt",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "_receive",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_receive",
    "access": "private",
    "description": "Handler executed when a message is recevied",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Message issuer's ID"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "_shouldStopPropagation",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_shouldStopPropagation",
    "access": "private",
    "description": "Check if a message should be propagated or not",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the message should not be propagated, False if it should be."
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "_findInBuffer",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_findInBuffer",
    "access": "private",
    "description": "Try to find the index of a message in the internal buffer",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Message's ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "int"
      ],
      "spread": false,
      "description": "The index of the message in the buffer, or -1 if not found"
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "_reviewBuffer",
    "memberof": "src/network/communication/broadcast/broadcast.js~Broadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/broadcast/broadcast.js~Broadcast#_reviewBuffer",
    "access": "private",
    "description": "Scan internal buffer to deliver waiting messages",
    "lineNumber": 238,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/network/communication/broadcast/messages.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nfunction BroadcastMessage (protocol, id, isReady, payload) {\n  return {\n    protocol,\n    id,\n    isReady,\n    payload\n  }\n}\n\nfunction MAntiEntropyRequest (causality) {\n  return {\n    type: 'MAntiEntropyRequest',\n    causality\n  }\n}\n\nfunction MAntiEntropyResponse (id, causality, nbElements, element) {\n  return {\n    type: 'MAntiEntropyResponse',\n    id,\n    causality,\n    nbElements,\n    element,\n    elements: []\n  }\n}\n\nmodule.exports = {\n  BroadcastMessage,\n  MAntiEntropyRequest,\n  MAntiEntropyResponse\n}\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/broadcast/messages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "BroadcastMessage",
    "memberof": "src/network/communication/broadcast/messages.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/network/communication/broadcast/messages.js~BroadcastMessage",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/communication/broadcast/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "protocol",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "isReady",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"protocol\": *, \"id\": *, \"isReady\": *, \"payload\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "MAntiEntropyRequest",
    "memberof": "src/network/communication/broadcast/messages.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/network/communication/broadcast/messages.js~MAntiEntropyRequest",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/communication/broadcast/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "causality",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": string, \"causality\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "MAntiEntropyResponse",
    "memberof": "src/network/communication/broadcast/messages.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/network/communication/broadcast/messages.js~MAntiEntropyResponse",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/communication/broadcast/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "causality",
        "types": [
          "*"
        ]
      },
      {
        "name": "nbElements",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": string, \"id\": *, \"causality\": *, \"nbElements\": *, \"element\": *, \"elements\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/network/communication/communication.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\n// const debug = require('debug')('foglet-core:communication');\nconst Unicast = require('./unicast/unicast.js')\nconst Broadcast = require('./broadcast/broadcast.js')\nconst MiddlewareRegistry = require('../../utils/middleware-registry.js')\n// streams\nconst StreamRequest = require('./stream/stream-request.js')\nconst StreamMessage = require('./stream/stream-message.js')\n\n/**\n * Communication is a facade to send messages to peers in a network using unicast or broadcast channels.\n * @author Grall Arnaud (Folkvir)\n */\nclass Communication {\n  constructor (source, protocol) {\n    this.network = source\n    this.unicast = new Unicast(this.network, protocol)\n    this.broadcast = new Broadcast(this.network, protocol)\n    // channels used for streaming\n    this._unicastStreams = new Unicast(this.network, `${protocol}-streams`)\n    this._broadcastStreams = new Broadcast(this.network, `${protocol}-streams`)\n    this._activeStreams = new Map()\n    this._middlewares = new MiddlewareRegistry()\n  }\n\n  /**\n   * Register a middleware, with an optional priority\n   * @param  {Object} middleware   - The middleware to register\n   * @param  {function} middleware.in - Function applied on middleware input\n   * @param  {function} middleware.out - Function applied on middleware output\n   * @param  {Number} [priority=0] - (optional) The middleware priority\n   * @return {void}\n   */\n  use (middleware, priority = 0) {\n    this._middlewares.register(middleware, priority)\n  }\n\n  /**\n   * Send a message to a specified peer\n   * @param  {string} id - Id of the peer\n   * @param  {Object} message - Message to send\n   * @return {Promise} Promise fulfilled when the message is sent\n   */\n  sendUnicast (id, message) {\n    return this.unicast.send(id, this._middlewares.in(message))\n  }\n\n  /**\n  * Begin the streaming of a message to another peer (using unicast)\n  * @param  {string} id - Id of the peer\n  * @return {StreamRequest} Stream used to transmit data to another peer\n  * @example\n  * const comm = getSomeCommunication();\n  * const peerID = getSomePeerID();\n  *\n  * const stream = comm.streamUnicast(peerID);\n  * stream.write('Hello');\n  * stream.write(' world!');\n  * stream.end();\n  */\n  streamUnicast (id) {\n    return new StreamRequest(msg => {\n      msg.payload = this._middlewares.in(msg.payload)\n      this._unicastStreams.send(id, msg)\n    })\n  }\n\n  /**\n   * @todo Complete tests of this function\n   * Send a message to multiple peers\n   * @param  {string[]} ids - Array of ids to the send message\n   * @param  {Object} message - Message to send\n   * @return {Promise} Promise fulfilled when all message are sent\n   */\n  sendMulticast (ids, message) {\n    return this.unicast.sendMultiple(ids, this._middlewares.in(message))\n  }\n\n  /**\n  * Send a message to all peers using broadcast, (optionnal: specify uniq message id and the id to wait, see: broadcast.js)\n  * @param  {Object} message - Message to broadcast over the network\n  * @param  {Object} [id] {_e: <stringId>, _c: <Integer>} this uniquely represents the id of the operation\n  * @param  {Object} [isReady] {_e: <stringId>, _c: <Integer>} this uniquely represents the id of the operation that we must wait before delivering the message\n  * @return {Object}  id of the message sent\n  */\n  sendBroadcast (message, id, isReady = undefined) {\n    return this.broadcast.send(this._middlewares.in(message), id, isReady)\n  }\n\n  /**\n  * Begin the streaming of a message to all peers (using broadcast)\n  * @param  {VersionVector} [isReady=undefined] - Id of the message to wait before this message is received\n  * @return {StreamRequest} Stream used to transmit data to all peers\n  * @example\n  * const comm = getSomeCommunication();\n  *\n  * const stream = comm.sendBroadcast();\n  * stream.write('Hello');\n  * stream.write(' world!');\n  * stream.end();\n  */\n  streamBroadcast (isReady = undefined) {\n    return new StreamRequest((msg, id, isReady) => {\n      msg.payload = this._middlewares.in(msg.payload)\n      // console.log(msg, id, isReady, this._broadcastStreams._causality)\n      return this._broadcastStreams.send(msg, id, isReady)\n    }, isReady)\n  }\n\n  /**\n  * Listen on incoming unicasted message\n  * @param  {MessageCallback} callback - Callback invoked with the message\n  * @return {void}\n  */\n  onUnicast (callback) {\n    this.unicast.on('receive', (id, message) => {\n      callback(id, this._middlewares.out(message))\n    })\n  }\n\n  /**\n  * Listen on incoming unicasted streams\n  * @param  {MessageCallback} callback - Callback invoked with a {@link StreamMessage} as message\n  * @return {void}\n  * @example\n  * const comm = getSomeCommunication();\n  *\n  * comm.onStreamUnicast((id, stream) => {\n  *  console.log('a peer with id = ', id, ' is streaming data to me');\n  *  stream.on('data', data => console.log(data));\n  *  stream.on('end', () => console.log('no more data available from the stream'));\n  * });\n  */\n  onStreamUnicast (callback) {\n    this._unicastStreams.on('receive', (id, message) => this._handleStreamMessage(id, message, callback))\n  }\n\n  /**\n  * Listen to an incoming unicasted message, and then remove the listener\n  * @param  {MessageCallback} callback - Callback invoked with the message\n  * @return {void}\n  */\n  onOnceUnicast (callback) {\n    this.unicast.once('receive', (id, message) => {\n      callback(id, this._middlewares.out(message))\n    })\n  }\n\n  /**\n   * Listen on broadcasted messages\n   * @param  {MessageCallback} callback - Callback invoked with the message\n   * @return {void}\n   */\n  onBroadcast (callback) {\n    this.broadcast.on('receive', (id, message) => callback(id, this._middlewares.out(message)))\n  }\n\n  /**\n  * Listen on incoming unicasted streams\n  * @param  {MessageCallback} callback - Callback invoked with a {@link StreamMessage} as message\n  * @return {void}\n  * @example\n  * const comm = getSomeCommunication();\n  *\n  * comm.onStreamBroadcast((id, stream) => {\n  *  console.log('a peer with id = ', id, ' is streaming data to me');\n  *  stream.on('data', data => console.log(data));\n  *  stream.on('end', () => console.log('no more data available from the stream'));\n  * });\n  */\n  onStreamBroadcast (callback) {\n    this._broadcastStreams.on('receive', (id, message) => this._handleStreamMessage(id, message, callback))\n  }\n\n  /**\n   * Listen to a broadcasted message, then remove the listener\n   * @param  {MessageCallback} callback - Callback invoked with the message\n   * @return {void}\n   */\n  onOnceBroadcast (callback) {\n    this.broadcast.once('receive', (id, message) => callback(id, this._middlewares.out(message)))\n  }\n\n  /**\n   * Remove all 'receive' unicast callback\n   * @return {void}\n   */\n  removeAllUnicastCallback () {\n    this.unicast.removeAllListeners('receive')\n  }\n\n  /**\n   * Remove all 'receive' broadcast callback\n   * @return {void}\n   */\n  removeAllBroacastCallback () {\n    this.broadcast.removeAllListeners('receive')\n  }\n\n  /**\n   * Handle an incoming stream message\n   * @private\n   * @param {string} id - The id of the peer who sent the message\n   * @param {Object} message - The stream message to process\n   * @param {function} callback - The callback associated with the stream message\n   * @return {void}\n   */\n  _handleStreamMessage (id, message, callback) {\n    // create responses objects for new streams\n    if (!this._activeStreams.has(message.id)) {\n      this._activeStreams.set(message.id, new StreamMessage())\n      callback(id, this._activeStreams.get(message.id))\n    }\n    switch (message.type) {\n      case 'chunk': {\n        this._activeStreams.get(message.id).push(message.payload)\n        break\n      }\n      case 'trailers': {\n        if (!this._activeStreams.has(message.id)) { throw new Error(`Cannot add trailers to an unkown stream with id = ${message.id}`) }\n        this._activeStreams.get(message.id)._trailers = message.payload\n        break\n      }\n      case 'end': {\n        this._closeStream(message.id)\n        break\n      }\n      case 'error': {\n        if (!this._activeStreams.has(message.id)) { throw new Error(`Cannot transmit an error to an unkown stream with id = ${message.id}`) }\n        this._activeStreams.get(message.id).emit('error', message.payload)\n        this._closeStream(message.id)\n        break\n      }\n      default:\n        throw new Error(`Unknown StreamMessage type found in incoming stream message: ${message.type}`)\n    }\n  }\n\n  /**\n   * Close an open stream\n   * @private\n   * @param {string} id - The ID of the stream to close\n   * @return {void}\n   */\n  _closeStream (id) {\n    if (!this._activeStreams.has(id)) { throw new Error(`Cannot close an unkown stream with id = ${id}`) }\n    this._activeStreams.get(id).push(null)\n    this._activeStreams.delete(id)\n  }\n}\n\nmodule.exports = Communication\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/communication.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "class",
    "name": "Communication",
    "memberof": "src/network/communication/communication.js",
    "static": true,
    "longname": "src/network/communication/communication.js~Communication",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/communication/communication.js",
    "importStyle": "Communication",
    "description": "Communication is a facade to send messages to peers in a network using unicast or broadcast channels.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Grall Arnaud (Folkvir)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 227,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "network",
    "memberof": "src/network/communication/communication.js~Communication",
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#network",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "unicast",
    "memberof": "src/network/communication/communication.js~Communication",
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#unicast",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "broadcast",
    "memberof": "src/network/communication/communication.js~Communication",
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#broadcast",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "_unicastStreams",
    "memberof": "src/network/communication/communication.js~Communication",
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#_unicastStreams",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "_broadcastStreams",
    "memberof": "src/network/communication/communication.js~Communication",
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#_broadcastStreams",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "_activeStreams",
    "memberof": "src/network/communication/communication.js~Communication",
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#_activeStreams",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "_middlewares",
    "memberof": "src/network/communication/communication.js~Communication",
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#_middlewares",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "use",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#use",
    "access": "public",
    "description": "Register a middleware, with an optional priority",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "The middleware to register"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.in",
        "description": "Function applied on middleware input"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.out",
        "description": "Function applied on middleware output"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "priority",
        "description": "(optional) The middleware priority"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "sendUnicast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#sendUnicast",
    "access": "public",
    "description": "Send a message to a specified peer",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the peer"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise fulfilled when the message is sent"
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "streamUnicast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#streamUnicast",
    "access": "public",
    "description": "Begin the streaming of a message to another peer (using unicast)",
    "examples": [
      "const comm = getSomeCommunication();\nconst peerID = getSomePeerID();\n\nconst stream = comm.streamUnicast(peerID);\nstream.write('Hello');\nstream.write(' world!');\nstream.end();"
    ],
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the peer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StreamRequest"
      ],
      "spread": false,
      "description": "Stream used to transmit data to another peer"
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "sendMulticast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#sendMulticast",
    "access": "public",
    "description": "",
    "lineNumber": 99,
    "todo": [
      "Complete tests of this function\nSend a message to multiple peers"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "Array of ids to the send message"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise fulfilled when all message are sent"
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "sendBroadcast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#sendBroadcast",
    "access": "public",
    "description": "Send a message to all peers using broadcast, (optionnal: specify uniq message id and the id to wait, see: broadcast.js)",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to broadcast over the network"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "id",
        "description": "{_e: <stringId>, _c: <Integer>} this uniquely represents the id of the operation"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "isReady",
        "description": "{_e: <stringId>, _c: <Integer>} this uniquely represents the id of the operation that we must wait before delivering the message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "id of the message sent"
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "streamBroadcast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#streamBroadcast",
    "access": "public",
    "description": "Begin the streaming of a message to all peers (using broadcast)",
    "examples": [
      "const comm = getSomeCommunication();\n\nconst stream = comm.sendBroadcast();\nstream.write('Hello');\nstream.write(' world!');\nstream.end();"
    ],
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "VersionVector"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "isReady",
        "description": "Id of the message to wait before this message is received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StreamRequest"
      ],
      "spread": false,
      "description": "Stream used to transmit data to all peers"
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "onUnicast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#onUnicast",
    "access": "public",
    "description": "Listen on incoming unicasted message",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback invoked with the message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "onStreamUnicast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#onStreamUnicast",
    "access": "public",
    "description": "Listen on incoming unicasted streams",
    "examples": [
      "const comm = getSomeCommunication();\n\ncomm.onStreamUnicast((id, stream) => {\n console.log('a peer with id = ', id, ' is streaming data to me');\n stream.on('data', data => console.log(data));\n stream.on('end', () => console.log('no more data available from the stream'));\n});"
    ],
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback invoked with a {@link StreamMessage} as message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "onOnceUnicast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#onOnceUnicast",
    "access": "public",
    "description": "Listen to an incoming unicasted message, and then remove the listener",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback invoked with the message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "onBroadcast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#onBroadcast",
    "access": "public",
    "description": "Listen on broadcasted messages",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback invoked with the message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "onStreamBroadcast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#onStreamBroadcast",
    "access": "public",
    "description": "Listen on incoming unicasted streams",
    "examples": [
      "const comm = getSomeCommunication();\n\ncomm.onStreamBroadcast((id, stream) => {\n console.log('a peer with id = ', id, ' is streaming data to me');\n stream.on('data', data => console.log(data));\n stream.on('end', () => console.log('no more data available from the stream'));\n});"
    ],
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback invoked with a {@link StreamMessage} as message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "onOnceBroadcast",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#onOnceBroadcast",
    "access": "public",
    "description": "Listen to a broadcasted message, then remove the listener",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback invoked with the message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "removeAllUnicastCallback",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#removeAllUnicastCallback",
    "access": "public",
    "description": "Remove all 'receive' unicast callback",
    "lineNumber": 212,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "removeAllBroacastCallback",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#removeAllBroacastCallback",
    "access": "public",
    "description": "Remove all 'receive' broadcast callback",
    "lineNumber": 220,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "_handleStreamMessage",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#_handleStreamMessage",
    "access": "private",
    "description": "Handle an incoming stream message",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the peer who sent the message"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The stream message to process"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback associated with the stream message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "_closeStream",
    "memberof": "src/network/communication/communication.js~Communication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/communication.js~Communication#_closeStream",
    "access": "private",
    "description": "Close an open stream",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID of the stream to close"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "src/network/communication/stream/messages.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\n/**\n * Get a function thta build a StreamMessage with a specific type\n * @private\n * @param {string} type - Message's type\n */\nconst StreamMessage = type => {\n  return (id, payload) => {\n    return {\n      id,\n      type,\n      payload\n    }\n  }\n}\n\n/**\n * A message send with a chunk of data\n * @private\n */\nconst StreamMessageChunk = StreamMessage('chunk')\n\n/**\n * A message send with trailing data\n * @private\n */\nconst StreamMessageTrailers = StreamMessage('trailers')\n\n/**\n * A message that close a transmission\n * @private\n */\nconst StreamMessageEnd = StreamMessage('end')\n\n/**\n * A message that signal an error\n * @private\n */\nconst StreamMessageError = StreamMessage('error')\n\nmodule.exports = {\n  StreamMessageChunk,\n  StreamMessageTrailers,\n  StreamMessageEnd,\n  StreamMessageError\n}\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/stream/messages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "StreamMessage",
    "memberof": "src/network/communication/stream/messages.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/network/communication/stream/messages.js~StreamMessage",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/network/communication/stream/messages.js",
    "importStyle": null,
    "description": "Get a function thta build a StreamMessage with a specific type",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Message's type"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "name": "StreamMessageChunk",
    "memberof": "src/network/communication/stream/messages.js",
    "static": true,
    "longname": "src/network/communication/stream/messages.js~StreamMessageChunk",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/network/communication/stream/messages.js",
    "importStyle": null,
    "description": "A message send with a chunk of data",
    "lineNumber": 45,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "StreamMessageTrailers",
    "memberof": "src/network/communication/stream/messages.js",
    "static": true,
    "longname": "src/network/communication/stream/messages.js~StreamMessageTrailers",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/network/communication/stream/messages.js",
    "importStyle": null,
    "description": "A message send with trailing data",
    "lineNumber": 51,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "StreamMessageEnd",
    "memberof": "src/network/communication/stream/messages.js",
    "static": true,
    "longname": "src/network/communication/stream/messages.js~StreamMessageEnd",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/network/communication/stream/messages.js",
    "importStyle": null,
    "description": "A message that close a transmission",
    "lineNumber": 57,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "StreamMessageError",
    "memberof": "src/network/communication/stream/messages.js",
    "static": true,
    "longname": "src/network/communication/stream/messages.js~StreamMessageError",
    "access": "private",
    "export": false,
    "importPath": "foglet-core/src/network/communication/stream/messages.js",
    "importStyle": null,
    "description": "A message that signal an error",
    "lineNumber": 63,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/network/communication/stream/stream-message.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst PassThrough = (require('readable-stream')).PassThrough\n\n/**\n * A StreamMessage enable to receive data streamed using a {@link StreamRequest}.\n * @extends PassThrough\n * @author Thomas Minier\n * @example\n * const foglet = getSomeFoglet();\n * foglet.onStreamUnicast((id, stream) => {\n *  console.log('a peer with id = ', id, ' is streaming data to me');\n *  stream.on('data', data => console.log(data));\n *  stream.on('end', () => console.log('no more data available from the stream'));\n * });\n */\nclass StreamMessage extends PassThrough {\n  /**\n   * Constructor\n   */\n  constructor () {\n    super({\n      objectMode: true\n    })\n    this._trailers = null\n  }\n\n  /**\n   * Get the trailing data of the message.\n   * Only populated once the `end` event has been fired.\n   * @return {Array} Message trailing data\n   */\n  get trailers () {\n    return this._trailers\n  }\n}\n\nmodule.exports = StreamMessage\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/stream/stream-message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "PassThrough",
    "memberof": "src/network/communication/stream/stream-message.js",
    "static": true,
    "longname": "src/network/communication/stream/stream-message.js~PassThrough",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/communication/stream/stream-message.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "class",
    "name": "StreamMessage",
    "memberof": "src/network/communication/stream/stream-message.js",
    "static": true,
    "longname": "src/network/communication/stream/stream-message.js~StreamMessage",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/communication/stream/stream-message.js",
    "importStyle": "StreamMessage",
    "description": "A StreamMessage enable to receive data streamed using a {@link StreamRequest}.",
    "examples": [
      "const foglet = getSomeFoglet();\nfoglet.onStreamUnicast((id, stream) => {\n console.log('a peer with id = ', id, ' is streaming data to me');\n stream.on('data', data => console.log(data));\n stream.on('end', () => console.log('no more data available from the stream'));\n});"
    ],
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 260,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/communication/stream/stream-message.js~StreamMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/stream/stream-message.js~StreamMessage#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 44
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "_trailers",
    "memberof": "src/network/communication/stream/stream-message.js~StreamMessage",
    "static": false,
    "longname": "src/network/communication/stream/stream-message.js~StreamMessage#_trailers",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "get",
    "name": "trailers",
    "memberof": "src/network/communication/stream/stream-message.js~StreamMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/stream/stream-message.js~StreamMessage#trailers",
    "access": "public",
    "description": "Get the trailing data of the message.\nOnly populated once the `end` event has been fired.",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Message trailing data"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "file",
    "name": "src/network/communication/stream/stream-request.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst uuid = require('uuid/v4')\nconst Writable = (require('readable-stream')).Writable\nconst messages = require('./messages.js')\n\n/**\n * A StreamRequest enable to stream data to a peer using a push-based API.\n * @extends Writable\n * @author Thomas Minier\n * @example\n * const foglet = getSomeFoglet();\n * const peerID = getSomePeerID();\n *\n * const stream = foglet.streamUnicast(peerID);\n * stream.write('Hello');\n * stream.write(' world!');\n * stream.end();\n */\nclass StreamRequest extends Writable {\n  /**\n   * Constructor\n   * @param {function} send - Function called to send a message\n   */\n  constructor (send) {\n    super({\n      objectMode: true\n    })\n    this._id = uuid()\n    this._send = send\n    this._trailers = []\n    this._last_id = undefined\n  }\n\n  /**\n   * Add a trailer.\n   * All trailers will be sent after the stream is closed, so this method can be called ny number of times\n   * before the `end` method is called.\n   * @param {*} value - The trailing data\n   * @return {void}\n   */\n  addTrailer (value) {\n    this._trailers.push(value)\n  }\n\n  /**\n   * Destroy the stream and emit an error on the `error` event.\n   * This error will be propagated to peer(s) that which data was streamed, and the associated output stream\n   * will also be destroyed.\n   * @param {string} error - The error responsible for the stream's destruction\n   */\n  destroy (error) {\n    this._last_id = this._send(messages.StreamMessageError(this._id, error), null, this._last_id)\n    super.destroy(error)\n  }\n\n  /**\n   * @private\n   */\n  _write (msg, encoding, callback) {\n    this._last_id = this._send(messages.StreamMessageChunk(this._id, msg), null, this._last_id)\n    callback()\n    return this._last_id\n  }\n\n  /**\n   * Send trailers if presents & close the transmission\n   * @private\n   */\n  _final (callback) {\n    if (this._trailers.length > 0) { this._last_id = this._send(messages.StreamMessageTrailers(this._id, this._trailers), null, this._last_id) }\n    this._last_id = this._send(messages.StreamMessageEnd(this._id), null, this._last_id)\n    callback()\n  }\n}\n\nmodule.exports = StreamRequest\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/stream/stream-request.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "variable",
    "name": "Writable",
    "memberof": "src/network/communication/stream/stream-request.js",
    "static": true,
    "longname": "src/network/communication/stream/stream-request.js~Writable",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/communication/stream/stream-request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "class",
    "name": "StreamRequest",
    "memberof": "src/network/communication/stream/stream-request.js",
    "static": true,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/communication/stream/stream-request.js",
    "importStyle": "StreamRequest",
    "description": "A StreamRequest enable to stream data to a peer using a push-based API.",
    "examples": [
      "const foglet = getSomeFoglet();\nconst peerID = getSomePeerID();\n\nconst stream = foglet.streamUnicast(peerID);\nstream.write('Hello');\nstream.write(' world!');\nstream.end();"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 266,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "send",
        "description": "Function called to send a message"
      }
    ]
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "_id",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#_id",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "_send",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#_send",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "_trailers",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#_trailers",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "_last_id",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#_last_id",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "addTrailer",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#addTrailer",
    "access": "public",
    "description": "Add a trailer.\nAll trailers will be sent after the stream is closed, so this method can be called ny number of times\nbefore the `end` method is called.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The trailing data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#destroy",
    "access": "public",
    "description": "Destroy the stream and emit an error on the `error` event.\nThis error will be propagated to peer(s) that which data was streamed, and the associated output stream\nwill also be destroyed.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "The error responsible for the stream's destruction"
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "_write",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#_write",
    "access": "private",
    "description": "",
    "lineNumber": 83,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      },
      {
        "name": "encoding",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "_final",
    "memberof": "src/network/communication/stream/stream-request.js~StreamRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/stream/stream-request.js~StreamRequest#_final",
    "access": "private",
    "description": "Send trailers if presents & close the transmission",
    "lineNumber": 93,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "file",
    "name": "src/network/communication/unicast/unicast.js",
    "content": "'use strict'\n\nconst AbstractUnicast = require('./../abstract/abstract-unicast.js')\nconst UnicastDefinition = require('unicast-definition')\n\n/**\n * Unicast represent the base implementation of an unicast protocol for the foglet library.\n * @extends AbstractUnicast\n * @author Arnaud Grall (Folkvir)\n */\nclass Unicast extends AbstractUnicast {\n  /**\n   * Constructor\n   * @param  {AbstractNetwork} source - The source RPS/overlay\n   * @param  {string} protocol - The name of the unicast protocol\n   */\n  constructor (source, protocol) {\n    super(source, protocol)\n    this._unicast = new UnicastDefinition(this._source.rps, {pid: this._protocol})\n    this._unicast.on(this._protocol, (id, message) => {\n      this._receive(id, message)\n    })\n  }\n\n  /**\n   * Send a message to a peer using its ID.\n   * This peer must be a neighbour.\n   * @param  {string}  id  - The id to send the message\n   * @param  {*} message - The message to send\n   * @return {Promise} A Promise fulfilled when the message is sent\n   */\n  send (id, message) {\n    return this._unicast.emit(this._protocol, id, this._source.outviewId, message)\n  }\n\n  /**\n   * Send a message to multiple peers\n   * @param  {string[]} ids - Set of peer IDs\n   * @param  {Object} message - Message to send\n   * @return {Promise} A Promise fulfilled when all message have been sent\n   */\n  sendMultiple (ids = [], message) {\n    return ids.reduce((prev, peerID) => {\n      return prev.then(() => this.send(peerID, message))\n    }, Promise.resolve())\n  }\n\n  /**\n   * Handler executed when a message is recevied\n   * @param  {string} id  - Message issuer's ID\n   * @param  {*} message - The message received\n   * @return {void}\n   */\n  _receive (id, message) {\n    this.emit('receive', id, message)\n  }\n}\n\nmodule.exports = Unicast\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/communication/unicast/unicast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "class",
    "name": "Unicast",
    "memberof": "src/network/communication/unicast/unicast.js",
    "static": true,
    "longname": "src/network/communication/unicast/unicast.js~Unicast",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/communication/unicast/unicast.js",
    "importStyle": "Unicast",
    "description": "Unicast represent the base implementation of an unicast protocol for the foglet library.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Arnaud Grall (Folkvir)"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 281,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/communication/unicast/unicast.js~Unicast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/unicast/unicast.js~Unicast#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractNetwork"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The source RPS/overlay"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "The name of the unicast protocol"
      }
    ]
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "_unicast",
    "memberof": "src/network/communication/unicast/unicast.js~Unicast",
    "static": false,
    "longname": "src/network/communication/unicast/unicast.js~Unicast#_unicast",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "send",
    "memberof": "src/network/communication/unicast/unicast.js~Unicast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/unicast/unicast.js~Unicast#send",
    "access": "public",
    "description": "Send a message to a peer using its ID.\nThis peer must be a neighbour.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id to send the message"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise fulfilled when the message is sent"
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "sendMultiple",
    "memberof": "src/network/communication/unicast/unicast.js~Unicast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/unicast/unicast.js~Unicast#sendMultiple",
    "access": "public",
    "description": "Send a message to multiple peers",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "Set of peer IDs"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise fulfilled when all message have been sent"
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "_receive",
    "memberof": "src/network/communication/unicast/unicast.js~Unicast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/communication/unicast/unicast.js~Unicast#_receive",
    "access": "private",
    "description": "Handler executed when a message is recevied",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Message issuer's ID"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "src/network/network-manager.js",
    "content": "/* eslint new-cap: 0 */\n/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst EventEmitter = require('events')\n\n// lodash utils\nconst lmerge = require('lodash.merge')\n\n// Networks\nconst Network = require('./network.js')\nconst SprayAdapter = require('./rps/sprayAdapter')\nconst CyclonAdapter = require('./rps/cyclon-adapter')\n\n// debug\nconst debug = (require('debug'))('foglet-core:network-manager')\n\n/**\n * A configuration object used to build an overlay\n * @typedef {Object} OverlayConfig\n * @property {string} name - Name of the overlay, used to access it with {@link NetworkManager#overlay}\n * @property {function} class - function used to instanciate the constructor with `new`\n * @property {Object} options - Dedicated options used to build the overlay\n * @property {string} options.protocol - Name of the protocol run by the overlay\n * @property {Object} options.signaling - Options used to configure the interactions with the signaling server\n * @property {string} options.signaling.address - URL of the signaling server\n * @property {string} options.signaling.room - Name of the room in which the application run\n * @example\n * {\n *  name: 'latencies-overlay',\n *  class: LatenciesOverlay,\n *  options: {\n *    protocol: 'foglet-latencies-overlay'\n *  }\n * }\n */\n\n/**\n * A NetworkManager manage several distinct {@link Network} instances, i.e. a RPS and a set of overlays,\n * and allow peers to choose which network they want to interact with.\n * @extends EventEmitter\n * @author Grall Arnaud (folkvir)\n */\nclass NetworkManager extends EventEmitter {\n  /**\n   * Constructor\n   * @param  {Object} options - Options used to build the networks\n   * @param {Object} options.rps - Options used to configure the Random Peer Sampling (RPS) network\n   * @param {string} options.rps.type - The type of RPS (`spray-wrtc` for Spray or `fcn-wrtc` for a fully connected network over WebRTC)\n   * @param {Object} options.rps.options - Options by the type of RPS choosed\n   * @param {string} options.rps.options.protocol - Name of the protocol run by the application\n   * @param {Object} options.rps.options.webrtc - WebRTC dedicated options (see WebRTC docs for more details)\n   * @param {number} options.rps.options.timeout - RPS timeout before definitively close a WebRTC connection\n   * @param {number} options.rps.options.delta - RPS shuffle interval\n   * @param {Object} options.rps.options.signaling - Options used to configure the interactions with the signaling server\n   * @param {string} options.rps.options.signaling.address - URL of the signaling server\n   * @param {string} options.rps.options.signaling.room - Name of the room in which the application run\n   * @param {Object} options.overlay - Options used to configure custom overlay in addition of the RPS\n   * @param {Object} options.overlay.options - Options propagated to all overlays, same as the options field used to configure the RPS.\n   * @param {OverlayConfig[]} options.overlay.overlays - Set of config objects used to build the overlays\n   */\n  constructor (options) {\n    super()\n    this._options = lmerge({\n      rps: {\n        type: 'spray-wrtc',\n        options: { // options will be passed to all components of the rps\n          protocol: 'spray-wrtc-communication'\n        }\n      },\n      overlays: []\n    }, options)\n    this._rps = this._buildRPS(this._options.rps.type, this._options.rps.options)\n\n    // build overlay(s)\n    this._overlays = new Map()\n    this._buildOverlays(this._options.overlays)\n\n    debug('Networks (Rps and overlays) initialized.')\n  }\n\n  /**\n   * Select and get an overlay to use for communication using its name.\n   * If no name is specified, the base RPS will be returned.\n   * @param  {string} [name=null] - (optional) Name of the overlay to get. Default to the RPS.\n   * @return {Network} Return the selected overlay/rps.\n   */\n  overlay (name = null) {\n    if (name === null) { return this._rps }\n    return this._overlays.get(name)\n  }\n\n  /**\n   * Register a middleware, with an optional priority\n   * @param  {Object} middleware   - The middleware to register\n   * @param  {function} middleware.in - Function applied on middleware input\n   * @param  {function} middleware.out - Function applied on middleware output\n   * @param  {Number} [priority=0] - (optional) The middleware priority\n   * @return {void}\n   */\n  registerMiddleware (middleware, priority = 0) {\n    this._rps.use(middleware, priority)\n    this._overlays.forEach(overlay => overlay.use(middleware, priority))\n  }\n\n  /**\n   * Construct the RPS by its type and options For the moment(spray-wrtc as default)\n   * @private\n   * @param  {string} type    - Type of the RPS (spray-wrtc/custom/...)\n   * @param  {Object} options - Options of the RPS\n   * @param  {string} options.protocol - Name of the protocol run by the RPS\n   * @param  {Object} options.signaling - Options used to configure the interactions with the signaling server\n   * @param  {string} options.signaling.address - URL of the signaling server\n   * @param  {string} options.signaling.room - Name of the room in which the application run\n   * @return {Network} The constructed RPS\n   */\n  _buildRPS (type, options) {\n    const rpsClass = this._chooseRps(type, options)\n    const rps = new rpsClass(options)\n    return new Network(rps, options.signaling, options.protocol)\n  }\n\n  /**\n   * Get a RPS constructor given its type in string format\n   * @private\n   * @deprecated As only Spray is available as RPS, there is only one possible choice...\n   * @param {string} type - RPS type\n   * @param {Object} options - Options to pass to the RPS\n   * @return {function} The RPS constructor\n   */\n  _chooseRps (type, options) {\n    let rps = null\n    switch (type) {\n      case 'spray-wrtc':\n        rps = SprayAdapter\n        break\n      case 'cyclon':\n        rps = CyclonAdapter\n        break\n      case 'custom':\n        rps = options.class\n        break\n      default:\n        rps = SprayAdapter\n        break\n    }\n    return rps\n  }\n\n  /**\n   * Construct all overlays\n   * @private\n   * @param  {OverlayConfig[]} overlays - Set of overlay config objetcs\n   * @return {void}\n   */\n  _buildOverlays (overlays) {\n    if (overlays.length === 0) debug('No overlays added, only the base RPS is available')\n    overlays.forEach(config => {\n      this._buildOverlay(config)\n    })\n  }\n\n  /**\n   *\n   * Build and add an overlay\n   * @private\n   * @throws {SyntaxError} Overlay configuration object must be a valid\n   * @throws {Error} An overlay with the same name has laready been registered\n   * @param {OverlayConfig} overlayConfig - Overlay configuration object\n   * @return {void}\n   */\n  _buildOverlay (overlayConfig) {\n    if (typeof overlayConfig !== 'object' || !('name' in overlayConfig) || !('class' in overlayConfig)) { throw new SyntaxError('An overlay is a configuration object {name: [string], class: [function], options: [Object]}') }\n    const options = overlayConfig.options\n    if (!('protocol' in options)) { throw new SyntaxError('An overlay configuration requires a protocol name, e;g. { protocol: [string] }') }\n\n    if (!('signaling' in options)) { debug(`[WARNING] no signaling server given for overlay \"${overlayConfig.name}\"! Only connections from inside the same app will be allowed!`) }\n\n    if (this._overlays.has(overlayConfig.name)) { throw new Error(`An overlay with the name \"${overlayConfig.name}\" has already been registered!`) }\n    const overlay = new overlayConfig.class(this, options)\n    this._overlays.set(overlayConfig.name, new Network(overlay, options.signaling, options.protocol))\n  }\n}\n\nmodule.exports = NetworkManager\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/network-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/network/network-manager.js",
    "static": true,
    "longname": "src/network/network-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/network-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "typedef",
    "name": "OverlayConfig",
    "memberof": "src/network/network-manager.js",
    "static": true,
    "longname": "src/network/network-manager.js~OverlayConfig",
    "access": "public",
    "description": "A configuration object used to build an overlay",
    "examples": [
      "{\n name: 'latencies-overlay',\n class: LatenciesOverlay,\n options: {\n   protocol: 'foglet-latencies-overlay'\n }\n}"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the overlay, used to access it with {@link NetworkManager#overlay}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "class",
        "description": "function used to instanciate the constructor with `new`"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Dedicated options used to build the overlay"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.protocol",
        "description": "Name of the protocol run by the overlay"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.signaling",
        "description": "Options used to configure the interactions with the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.signaling.address",
        "description": "URL of the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.signaling.room",
        "description": "Name of the room in which the application run"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "OverlayConfig"
    }
  },
  {
    "__docId__": 289,
    "kind": "class",
    "name": "NetworkManager",
    "memberof": "src/network/network-manager.js",
    "static": true,
    "longname": "src/network/network-manager.js~NetworkManager",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/network-manager.js",
    "importStyle": "NetworkManager",
    "description": "A NetworkManager manage several distinct {@link Network} instances, i.e. a RPS and a set of overlays,\nand allow peers to choose which network they want to interact with.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Grall Arnaud (folkvir)"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 290,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options used to build the networks"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps",
        "description": "Options used to configure the Random Peer Sampling (RPS) network"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.type",
        "description": "The type of RPS (`spray-wrtc` for Spray or `fcn-wrtc` for a fully connected network over WebRTC)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options",
        "description": "Options by the type of RPS choosed"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.protocol",
        "description": "Name of the protocol run by the application"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.webrtc",
        "description": "WebRTC dedicated options (see WebRTC docs for more details)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.timeout",
        "description": "RPS timeout before definitively close a WebRTC connection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.delta",
        "description": "RPS shuffle interval"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.signaling",
        "description": "Options used to configure the interactions with the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.signaling.address",
        "description": "URL of the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rps.options.signaling.room",
        "description": "Name of the room in which the application run"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.overlay",
        "description": "Options used to configure custom overlay in addition of the RPS"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.overlay.options",
        "description": "Options propagated to all overlays, same as the options field used to configure the RPS."
      },
      {
        "nullable": null,
        "types": [
          "OverlayConfig[]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.overlay.overlays",
        "description": "Set of config objects used to build the overlays"
      }
    ]
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "_options",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#_options",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "_rps",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#_rps",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "_overlays",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#_overlays",
    "access": "private",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "overlay",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#overlay",
    "access": "public",
    "description": "Select and get an overlay to use for communication using its name.\nIf no name is specified, the base RPS will be returned.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "(optional) Name of the overlay to get. Default to the RPS."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Network"
      ],
      "spread": false,
      "description": "Return the selected overlay/rps."
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "registerMiddleware",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#registerMiddleware",
    "access": "public",
    "description": "Register a middleware, with an optional priority",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "The middleware to register"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.in",
        "description": "Function applied on middleware input"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.out",
        "description": "Function applied on middleware output"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "priority",
        "description": "(optional) The middleware priority"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "_buildRPS",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#_buildRPS",
    "access": "private",
    "description": "Construct the RPS by its type and options For the moment(spray-wrtc as default)",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of the RPS (spray-wrtc/custom/...)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options of the RPS"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.protocol",
        "description": "Name of the protocol run by the RPS"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.signaling",
        "description": "Options used to configure the interactions with the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.signaling.address",
        "description": "URL of the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.signaling.room",
        "description": "Name of the room in which the application run"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Network"
      ],
      "spread": false,
      "description": "The constructed RPS"
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "_chooseRps",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#_chooseRps",
    "access": "private",
    "description": "Get a RPS constructor given its type in string format",
    "lineNumber": 153,
    "deprecated": "As only Spray is available as RPS, there is only one possible choice...",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "RPS type"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to pass to the RPS"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "The RPS constructor"
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "_buildOverlays",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#_buildOverlays",
    "access": "private",
    "description": "Construct all overlays",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "OverlayConfig[]"
        ],
        "spread": false,
        "optional": false,
        "name": "overlays",
        "description": "Set of overlay config objetcs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "_buildOverlay",
    "memberof": "src/network/network-manager.js~NetworkManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network-manager.js~NetworkManager#_buildOverlay",
    "access": "private",
    "description": "\nBuild and add an overlay",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "OverlayConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "overlayConfig",
        "description": "Overlay configuration object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "SyntaxError"
        ],
        "description": "Overlay configuration object must be a valid"
      },
      {
        "types": [
          "Error"
        ],
        "description": "An overlay with the same name has laready been registered"
      }
    ]
  },
  {
    "__docId__": 300,
    "kind": "file",
    "name": "src/network/network.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\n// Communication\nconst Communication = require('./communication/communication.js')\n// Signaling\nconst Signaling = require('./signaling/signaling.js')\n\n/**\n * Network represent a network layer with three main components:\n * * The **network** itself, which can be a RPS, like {@link SprayAdapter}, or an overlay, like {@link LatenciesOverlay}.\n * * The **signaling** part, which is a connection with a signaling server used by peers to join the network.\n * * The **communication** part, which allow a peer to send message in the network using broadcast or unicast channels.\n * @author Grall Arnaud (folkvir)\n */\nclass Network {\n  /**\n   * Constructor\n   * @param  {AbstractNetwork} network - The network layer\n   * @param  {Object} signaling - Options used to build the signaling part\n   * @param  {string} signaling.address - URL of the signaling server\n   * @param  {string} signaling.room - Name of the room in which the application run\n   * @param  {string} protocol - Name of the protocol run by the network\n   */\n  constructor (network, signaling, protocol) {\n    this._network = network\n    this._protocol = protocol\n    this._signaling = new Signaling(network, signaling)\n    this._communication = new Communication(network, protocol)\n  }\n\n  /**\n   * Get the protocol of the network\n   * @return {[type]} [description]\n   */\n  get protocol () {\n    return this._protocol\n  }\n\n  /**\n   * The network component\n   * @return {AbstractNetwork} The network component\n   */\n  get network () {\n    return this._network\n  }\n\n  /**\n   * The signaling component\n   * @return {Signaling} The signaling component\n   */\n  get signaling () {\n    return this._signaling\n  }\n\n  /**\n   * The communication component\n   * @return {Communication} The communication component\n   */\n  get communication () {\n    return this._communication\n  }\n\n  /**\n   * Register a middleware, with an optional priority\n   * @param  {Object} middleware   - The middleware to register\n   * @param  {function} middleware.in - Function applied on middleware input\n   * @param  {function} middleware.out - Function applied on middleware output\n   * @param  {Number} [priority=0] - (optional) The middleware priority\n   * @return {void}\n   */\n  use (middleware, priority = 0) {\n    this.communication.use(middleware, priority)\n  }\n}\n\nmodule.exports = Network\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/network.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "class",
    "name": "Network",
    "memberof": "src/network/network.js",
    "static": true,
    "longname": "src/network/network.js~Network",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/network.js",
    "importStyle": "Network",
    "description": "Network represent a network layer with three main components:\n* The **network** itself, which can be a RPS, like {@link SprayAdapter}, or an overlay, like {@link LatenciesOverlay}.\n* The **signaling** part, which is a connection with a signaling server used by peers to join the network.\n* The **communication** part, which allow a peer to send message in the network using broadcast or unicast channels.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Grall Arnaud (folkvir)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network.js~Network#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractNetwork"
        ],
        "spread": false,
        "optional": false,
        "name": "network",
        "description": "The network layer"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "signaling",
        "description": "Options used to build the signaling part"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signaling.address",
        "description": "URL of the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signaling.room",
        "description": "Name of the room in which the application run"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "Name of the protocol run by the network"
      }
    ]
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "_network",
    "memberof": "src/network/network.js~Network",
    "static": false,
    "longname": "src/network/network.js~Network#_network",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "_protocol",
    "memberof": "src/network/network.js~Network",
    "static": false,
    "longname": "src/network/network.js~Network#_protocol",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "_signaling",
    "memberof": "src/network/network.js~Network",
    "static": false,
    "longname": "src/network/network.js~Network#_signaling",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "_communication",
    "memberof": "src/network/network.js~Network",
    "static": false,
    "longname": "src/network/network.js~Network#_communication",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "get",
    "name": "protocol",
    "memberof": "src/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network.js~Network#protocol",
    "access": "public",
    "description": "Get the protocol of the network",
    "lineNumber": 58,
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "get",
    "name": "network",
    "memberof": "src/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network.js~Network#network",
    "access": "public",
    "description": "The network component",
    "lineNumber": 66,
    "return": {
      "nullable": null,
      "types": [
        "AbstractNetwork"
      ],
      "spread": false,
      "description": "The network component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "get",
    "name": "signaling",
    "memberof": "src/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network.js~Network#signaling",
    "access": "public",
    "description": "The signaling component",
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "Signaling"
      ],
      "spread": false,
      "description": "The signaling component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "communication",
    "memberof": "src/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network.js~Network#communication",
    "access": "public",
    "description": "The communication component",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "Communication"
      ],
      "spread": false,
      "description": "The communication component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "use",
    "memberof": "src/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/network.js~Network#use",
    "access": "public",
    "description": "Register a middleware, with an optional priority",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "The middleware to register"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.in",
        "description": "Function applied on middleware input"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.out",
        "description": "Function applied on middleware output"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "priority",
        "description": "(optional) The middleware priority"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "src/network/rps/cyclon/cyclon.js",
    "content": "const N2N = require('n2n-overlay-wrtc')\nconst lmerge = require('lodash.merge')\nconst uniqid = require('uuid/v4')\nconst PV = require('./partialview')\nconst debug = (require('debug'))('cyclon')\n\n/**\n * Implementation of CYCLON: Inexpensive Membership Management for Unstructured P2P Overlays\n * Spyros Voulgaris,1,2 Daniela Gavidia,1 and Maarten van Steen1\n * @article{voulgaris2005cyclon,\n    title={Cyclon: Inexpensive membership management for unstructured p2p overlays},\n    author={Voulgaris, Spyros and Gavidia, Daniela and Van Steen, Maarten},\n    journal={Journal of Network and Systems Management},\n    volume={13},\n    number={2},\n    pages={197--217},\n    year={2005},\n    publisher={Springer}\n  }\n *\n * @type {[type]}\n */\nmodule.exports = class Cyclon extends N2N {\n  constructor (options) {\n    const DEFAULT_OPTIONS = {\n      pid: 'cyclon',\n      peer: uniqid(),\n      maxPeers: 5,\n      timeoutnetwork: 20 * 1000,\n      timeoutconnection: 20 * 1000,\n      retry: 5,\n      delta: 30 * 1000,\n      timeout: 30 * 1000\n    }\n    super(lmerge(DEFAULT_OPTIONS, options))\n    this._partialView = new PV()\n    this._periodic = undefined\n    this.on('receive', (id, msg) => this._receive(id, msg))\n    this.on('open', (peerId) => {\n      this._open(peerId)\n    })\n    this.on('close', (peerId) => {\n      this._close(peerId)\n    })\n    this.on('fail', (peerId) => {\n      this._onArcDown(peerId)\n    })\n  }\n\n  get partialView () {\n    return this._partialView\n  }\n\n  /**\n   * Joining a network.\n   * @param {callback} sender Function that will be called each time an offer\n   * arrives to this peer. It is the responsability of the caller to send\n   * these offer (using sender) to the contact inside the network.\n   * @returns {Promise} A promise that is resolved when the peer joins the\n   * network -- the resolve contains the peerId; rejected after a timeout, or\n   * already connected state.\n   */\n  join (sender) {\n    return new Promise((resolve, reject) => {\n      let to = setTimeout(() => {\n        reject(new Error('conenction timed out'))\n      }, this.options.timeoutconnection)\n      // #2 very first call, only done once\n      this.once('open', (peerId) => {\n        this.send(peerId, {type: 'MJoin'}, this.options.retry).then(() => {\n          clearTimeout(to)\n          this._start() // start shuffling process\n          resolve(peerId)\n        }).catch(() => {\n          reject(new Error('failed to send a MJoin message after establishing the connection. Please report.'))\n        })\n      })\n      this.connect(sender)\n    })\n  }\n\n  _open (peerId) {\n    debug('[%s] %s ===> %s', this.PID, this.PEER, peerId)\n    if (!this._partialView.has(peerId)) this._partialView.add(peerId)\n    if (this._partialView.size > this.options.maxPeers) {\n      this.disconnect(peerId)\n    }\n  }\n\n  /**\n   * @private Behavior when a connection is closed.\n   * @param {string} peerId The identifier of the removed arc.\n   */\n  _close (peerId) {\n    debug('[%s] %s =†=> %s', this.PID, this.PEER, peerId)\n    if (this._partialView.has(peerId)) this._partialView.delete(peerId)\n  }\n\n  _onJoin (id) {\n    if (this._partialView.size > 0) {\n      // #1 all neighbors -> peerId\n      debug('[%s] %s ===> join %s ===> %s neighbors', this.PID, id, this.PEER, this._partialView.size)\n      this._partialView.forEach((ages, neighbor) => {\n        this.connect(id, neighbor)\n      })\n    } else {\n      // #2 Seems like a 2-peer network;  this -> peerId;\n      debug('[%s] %s ===> join %s ===> %s', this.PID, id, this.PEER, id)\n      this.connect(null, id)\n    };\n  }\n\n  _onLeave (id) {\n    debug('%s: just left the game!', id)\n  }\n\n  _start () {\n    debug('[%s] starting periodic shuffling with period=%f', this.PEER, this.options.delta)\n    this._periodic = setInterval(() => {\n      this.exchange()\n    }, this.options.delta)\n  }\n\n  _stop () {\n    clearInterval(this._periodic)\n  }\n\n  /**\n   * @private Called each time this protocol receives a message.\n   * @param {string} peerId The identifier of the peer that sent the message.\n   * @param {object|MExchange|MJoin} message The message received.\n   */\n  _receive (peerId, message) {\n    if (message.type && message.type === 'MExchange') {\n      this._onExchange(peerId, message)\n    } else if (message.type && message.type === 'MExchangeBack') {\n      this.emit('MExchangeBack-' + message.id, peerId, message)\n    } else if (message.type && message.type === 'MJoin') {\n      this._onJoin(peerId)\n    } else if (message.type && message.type === 'MLeave') {\n      this._onLeave(peerId)\n    } else if (message.type && message.type === 'MBridge') {\n      this._onBridge(message.from, message.to)\n    } else {\n      throw new Error('_receive, message unhandled')\n    }\n  }\n\n  _exchange () {\n    return this.exchange()\n  }\n\n  exchange () {\n    this.emit('begin-shuffle')\n    return new Promise((resolve, reject) => {\n      if (this._partialView.size === 0) resolve()\n\n      // 1. Increase by one the age of all neighbors.\n      this._partialView.increment()\n      // 2. Select neighbor Q with the highest age among all neighbors, and l − 1\n      // other random neighbors.\n      // const keys = [...this._partialView.keys()]\n      const oldest = this._partialView.oldest // keys[Math.floor(Math.random() * keys.length)]\n      const sample = this._getSample(this.options.maxPeers)\n      // 3. Replace Q’s entry with a new entry of age 0 and with P’s address.\n      this._partialView.removeOldest(oldest)\n      this._partialView.add(oldest)\n      sample.map(samp => {\n        if (samp.id === oldest) {\n          samp.id = this.getInviewId()\n          samp.age = 0\n        }\n      })\n      debug('[%s] Starting to exchange with %s with a sample of size: %f', this.PEER, oldest, sample.length)\n      // 4. Send the updated subset to peer Q.\n      // need to try with another peer if it fails\n      const msgid = uniqid()\n      this.send(oldest, {\n        type: 'MExchange',\n        id: msgid,\n        from: this.getInviewId(),\n        sample\n      }, this.options.retry).then(() => {\n        // put a timeout on the reply in order to skip the round\n        let timeout = setTimeout(() => {\n          this.removeAllListeners('MExchangeBack-' + msgid)\n          resolve() // skip the round or perhaps reject?\n        }, this.options.timeoutnetwork)\n        // 5. Receive from Q a subset of no more that i of its own entries\n        this.once('MExchangeBack-' + msgid, (id, message) => {\n          clearTimeout(timeout)\n          // 6. Discard entries pointing at P and entries already contained in P’s\n          // cache.\n          // at least put the id of the peer we just exchange samples into the list of arcs to remove\n          const tokeep = message.sample.filter(samp => {\n            if (this._partialView.has(samp.id) || samp.id === oldest || samp.id === id) {\n              return false\n            } else {\n              return true\n            }\n          })\n          // 7. Update P’s cache to include all remaining entries, by firstly using empty\n          // cache slots (if any), and secondly replacing entries among the ones sent to Q.\n          for (let i = 0; i < tokeep.length; i++) {\n            const keep = tokeep[i]\n            if (this._partialView.size >= this.options.maxPeers) {\n              const rn = Math.floor(Math.random() * sample.length)\n              const idrn = sample[rn].id\n              sample.splice(rn, 1)\n              debug('[%s] replacing entry %s by %s', this.PEER, idrn, keep.id)\n              this.disconnect(idrn)\n              this._partialView.removeAll(idrn)\n            }\n            this.send(id, {\n              type: 'MBridge',\n              from: this.getInviewId(),\n              to: keep.id\n            }, this.options.retry).then(() => {\n              //\n            }).catch(e => {\n              // console.log(e)\n            })\n          }\n          resolve()\n        })\n      }).catch(e => {\n        console.log('%s Error when sending the sample to %s', this.PEER, oldest)\n        // try with another peers or skip\n        resolve()\n      })\n    }).then(() => {\n      this.emit('end-shuffle')\n      return Promise.resolve()\n    }).catch(e => {\n      this.emit('end-shuffle')\n      return Promise.reject(e)\n    })\n  }\n\n  _onExchange (id, message) {\n    // the receiving node Q replies by sending back a random subset of at most l of its neighbors,\n    //  and updates its own cache to accommodate all received entries.\n    //  It does not increase, though, any entry’s age until its own turn comes to initiate a shuffle.\n    const saveSample = message.sample.slice(0)\n    const saveOriginator = String(message.from)\n    const sample = this._getSample(this.options.maxPeers)\n    debug('[%s] Answer to a an exchange demande with %s with a sample of size: %f', this.PEER, saveOriginator, sample.length)\n    // now reply\n    message.type = 'MExchangeBack'\n    message.sample = sample\n    message.from = this.getInviewId()\n    this.send(id, message, this.options.retry)\n    // 6. Discard entries pointing at P and entries already contained in P’s\n    // cache.\n    const tokeep = saveSample.filter(samp => {\n      if (this._partialView.has(samp.id)) {\n        return false\n      } else {\n        return true\n      }\n    })\n    // 7. Update P’s cache to include all remaining entries, by firstly using empty\n    // cache slots (if any), and secondly replacing entries among the ones sent to Q.\n    for (let i = 0; i < tokeep.length; i++) {\n      const keep = tokeep[i]\n      if (this._partialView.size >= this.options.maxPeers) {\n        // replacement of links into our pv...\n        const rn = Math.floor(Math.random() * sample.length)\n        const idrn = sample[rn].id\n        sample.splice(rn, 1)\n        debug('[%s] replacing entry %s by %s', this.PEER, idrn, keep.id)\n        this.disconnect(idrn)\n        this._partialView.removeAll(idrn)\n      }\n      this.send(id, {\n        type: 'MBridge',\n        from: this.getInviewId(),\n        to: keep.id\n      }, this.options.retry).then(() => {\n        //\n      }).catch(e => {\n        // console.log(e)\n      })\n    }\n  }\n\n  _getSample (size) {\n    let sample = []\n    // #1 create a flatten version of the partial view\n    let flatten = []\n    this._partialView.forEach((ages, neighbor) => {\n      flatten.push({id: neighbor, age: ages[0]})\n    })\n    // #2 process the size of the sample, at maximum maxPeers\n    const sampleSize = Math.min(flatten.length, size)\n    // #3 add neighbors to the sample chosen at random\n    while (sample.length < sampleSize) {\n      const rn = Math.floor(Math.random() * flatten.length)\n      sample.push(flatten[rn])\n      flatten.splice(rn, 1)\n    };\n    return sample\n  }\n\n  /**\n   * Get k neighbors from the partial view. If k is not reached, it tries to\n   * fill the gap with neighbors from the inview.  It is worth noting that\n   * each peer controls its outview but not its inview. The more the neigbhors\n   * from the outview the better.\n   * @param {number} k The number of neighbors requested. If k is not defined,\n   * it returns every known identifiers of the partial view.\n   * @return {string[]} Array of identifiers.\n   */\n  getPeers (k) {\n    let peers = []\n    if (typeof k === 'undefined') {\n      // #1 get all the partial view\n      this._partialView.forEach((occ, peerId) => {\n        peers.push(peerId)\n      })\n    } else {\n      // #2 get random identifier from outview\n      let out = []\n      this._partialView.forEach((ages, peerId) => out.push(peerId))\n      while (peers.length < k && out.length > 0) {\n        let rn = Math.floor(Math.random() * out.length)\n        peers.push(out[rn])\n        out.splice(rn, 1)\n      };\n      // #3 get random identifier from the inview to fill k-entries\n      let inView = []\n      this.i.forEach((occ, peerId) => inView.push(peerId))\n      while (peers.length < k && inView.length > 0) {\n        let rn = Math.floor(Math.random() * inView.length)\n        peers.push(inView[rn])\n        inView.splice(rn, 1)\n      };\n    };\n    // debug('[%s] %s provides %s peers', this.PID, this.PEER, peers.length)\n    return peers\n  }\n\n  _onBridge (from, to) {\n    // debug('[%s] Bridge bewteen (%s,%s)', this.PEER, from, to)\n    if (from !== to) this.connect(from, to)\n  }\n\n  /**\n   * @private A connection failed to establish properly, systematically\n   * duplicates an element of the partial view.\n   * @param {string|null} peerId The identifier of the peer we failed to\n   * establish a connection with. Null if it was yet to be known.\n   */\n  _onArcDown (peerId) {\n    debug('[%s] ONARCDOWN ==> %s =X> %s', this.PID, this.PEER, peerId || 'unknown')\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/rps/cyclon/cyclon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/network/rps/cyclon/cyclon.js",
    "static": true,
    "longname": "src/network/rps/cyclon/cyclon.js~debug",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/rps/cyclon/cyclon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "class",
    "name": "Cyclon",
    "memberof": "src/network/rps/cyclon/cyclon.js",
    "static": true,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/rps/cyclon/cyclon.js",
    "importStyle": "Cyclon",
    "description": "Implementation of CYCLON: Inexpensive Membership Management for Unstructured P2P Overlays\nSpyros Voulgaris,1,2 Daniela Gavidia,1 and Maarten van Steen1\n@article{voulgaris2005cyclon,\ntitle={Cyclon: Inexpensive membership management for unstructured p2p overlays},\nauthor={Voulgaris, Spyros and Gavidia, Daniela and Van Steen, Maarten},\njournal={Journal of Network and Systems Management},\nvolume={13},\nnumber={2},\npages={197--217},\nyear={2005},\npublisher={Springer}\n}",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "n2n-overlay-wrtc~N2N"
    ]
  },
  {
    "__docId__": 315,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "_partialView",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_partialView",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "_periodic",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_periodic",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "get",
    "name": "partialView",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#partialView",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "join",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#join",
    "access": "public",
    "description": "Joining a network.",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A promise that is resolved when the peer joins the\nnetwork -- the resolve contains the peerId; rejected after a timeout, or\nalready connected state."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "callback"
        ],
        "spread": false,
        "optional": false,
        "name": "sender",
        "description": "Function that will be called each time an offer\narrives to this peer. It is the responsability of the caller to send\nthese offer (using sender) to the contact inside the network."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that is resolved when the peer joins the\nnetwork -- the resolve contains the peerId; rejected after a timeout, or\nalready connected state."
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "_open",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_open",
    "access": "private",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "peerId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "_close",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_close",
    "access": "private",
    "description": "",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "peerId",
        "description": "The identifier of the removed arc."
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "_onJoin",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_onJoin",
    "access": "private",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "_onLeave",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_onLeave",
    "access": "private",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "_start",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_start",
    "access": "private",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "_stop",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_stop",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "_receive",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_receive",
    "access": "private",
    "description": "",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "peerId",
        "description": "The identifier of the peer that sent the message."
      },
      {
        "nullable": null,
        "types": [
          "object",
          "MExchange",
          "MJoin"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message received."
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "_exchange",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_exchange",
    "access": "private",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "exchange",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#exchange",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "_onExchange",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_onExchange",
    "access": "private",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "_getSample",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_getSample",
    "access": "private",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "getPeers",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#getPeers",
    "access": "public",
    "description": "Get k neighbors from the partial view. If k is not reached, it tries to\nfill the gap with neighbors from the inview.  It is worth noting that\neach peer controls its outview but not its inview. The more the neigbhors\nfrom the outview the better.",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The number of neighbors requested. If k is not defined,\nit returns every known identifiers of the partial view."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Array of identifiers."
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "_onBridge",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_onBridge",
    "access": "private",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "to",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "_onArcDown",
    "memberof": "src/network/rps/cyclon/cyclon.js~Cyclon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/cyclon.js~Cyclon#_onArcDown",
    "access": "private",
    "description": "",
    "lineNumber": 354,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "peerId",
        "description": "The identifier of the peer we failed to\nestablish a connection with. Null if it was yet to be known."
      }
    ],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "file",
    "name": "src/network/rps/cyclon/partialview.js",
    "content": "class PartialView extends Map {\n  /**\n     * Get the oldest peer in the partial view.\n     * @returns {string} The oldest peer in the array.\n     */\n  get oldest () {\n    if (this.size <= 0) { throw new Error('oldest peer not found') };\n    let oldestPeer = null\n    let oldestAge = 0\n    this.forEach((ages, peerId) => {\n      if (oldestAge <= ages[ages.length - 1]) {\n        oldestPeer = peerId\n        oldestAge = ages[ages.length - 1]\n      };\n    })\n    return oldestPeer\n  };\n\n  /**\n     * Increment the age of the whole partial view\n     */\n  increment () {\n    this.forEach((ages, peerId) => {\n      this.set(peerId, ages.map((age) => { return age + 1 }))\n    })\n  };\n\n  /**\n     * Add the peer to the partial view with an age of 0.\n     * @param {string} peerId The identifier of the peer added to the partial\n     * view.\n     */\n  add (peerId) {\n    (!this.has(peerId)) && this.set(peerId, [])\n    this.get(peerId).unshift(0) // add 0 in front of the array\n  };\n\n  /**\n     * Remove the newest entry of the peer from the partial view.\n     * @param {string} peerId The identifier of the peer to remove from the\n     * partial view.\n     */\n  removeYoungest (peerId) {\n    if (!this.has(peerId)) {\n      throw new Error('removeYoungest, peer not found' + peerId)\n    };\n    this.get(peerId).shift();\n    (this.get(peerId).length === 0) && this.delete(peerId)\n  };\n\n  /**\n     * Remove the oldest entry of the peer from the partial view.\n     * @param {string} peerId The identifier of the peer to remove from the\n     * partial view.\n     */\n  removeOldest (peerId) {\n    if (!this.has(peerId)) {\n      throw new Error('removeOldest, peer not found:' + peerId)\n    };\n    this.get(peerId).pop();\n    (this.get(peerId).length === 0) && this.delete(peerId)\n  };\n\n  /**\n     * Remove all entries of the peer from the partial view.\n     * @param {string} peerId The identifier of the peer to remove from the\n     * partial view.\n     * @returns {number} The number of occurrences of peerId removed.\n     */\n  removeAll (peerId) {\n    if (!this.has(peerId)) {\n      throw new Error('removeAll, peer not found: ' + peerId)\n    };\n    const occ = this.get(peerId).length\n    this.delete(peerId)\n    return occ\n  };\n\n  /**\n     * Get the least frequent peer. If multiple peers have the same number of\n     * occurrences, it chooses one among them at random.\n     * @returns {string} The identifier of a least frequent peer.\n     */\n  get leastFrequent () {\n    let leastFrequent = []\n    let frequency = Infinity\n    this.forEach((ages, peerId) => {\n      if (ages.length < frequency) {\n        leastFrequent = []\n        frequency = ages.length\n      };\n      (ages.length === frequency) && leastFrequent.push(peerId)\n    })\n    return leastFrequent[Math.floor(Math.random() * leastFrequent.length)]\n  };\n}\n\nmodule.exports = PartialView\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/rps/cyclon/partialview.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "class",
    "name": "PartialView",
    "memberof": "src/network/rps/cyclon/partialview.js",
    "static": true,
    "longname": "src/network/rps/cyclon/partialview.js~PartialView",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/rps/cyclon/partialview.js",
    "importStyle": "PartialView",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "Map"
    ]
  },
  {
    "__docId__": 337,
    "kind": "get",
    "name": "oldest",
    "memberof": "src/network/rps/cyclon/partialview.js~PartialView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/partialview.js~PartialView#oldest",
    "access": "public",
    "description": "Get the oldest peer in the partial view.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The oldest peer in the array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The oldest peer in the array."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "increment",
    "memberof": "src/network/rps/cyclon/partialview.js~PartialView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/partialview.js~PartialView#increment",
    "access": "public",
    "description": "Increment the age of the whole partial view",
    "lineNumber": 22,
    "params": [],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "add",
    "memberof": "src/network/rps/cyclon/partialview.js~PartialView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/partialview.js~PartialView#add",
    "access": "public",
    "description": "Add the peer to the partial view with an age of 0.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "peerId",
        "description": "The identifier of the peer added to the partial\nview."
      }
    ],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "removeYoungest",
    "memberof": "src/network/rps/cyclon/partialview.js~PartialView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/partialview.js~PartialView#removeYoungest",
    "access": "public",
    "description": "Remove the newest entry of the peer from the partial view.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "peerId",
        "description": "The identifier of the peer to remove from the\npartial view."
      }
    ],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "removeOldest",
    "memberof": "src/network/rps/cyclon/partialview.js~PartialView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/partialview.js~PartialView#removeOldest",
    "access": "public",
    "description": "Remove the oldest entry of the peer from the partial view.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "peerId",
        "description": "The identifier of the peer to remove from the\npartial view."
      }
    ],
    "return": null
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "removeAll",
    "memberof": "src/network/rps/cyclon/partialview.js~PartialView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/partialview.js~PartialView#removeAll",
    "access": "public",
    "description": "Remove all entries of the peer from the partial view.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The number of occurrences of peerId removed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "peerId",
        "description": "The identifier of the peer to remove from the\npartial view."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The number of occurrences of peerId removed."
    }
  },
  {
    "__docId__": 343,
    "kind": "get",
    "name": "leastFrequent",
    "memberof": "src/network/rps/cyclon/partialview.js~PartialView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon/partialview.js~PartialView#leastFrequent",
    "access": "public",
    "description": "Get the least frequent peer. If multiple peers have the same number of\noccurrences, it chooses one among them at random.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The identifier of a least frequent peer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The identifier of a least frequent peer."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "file",
    "name": "src/network/rps/cyclon-adapter.js",
    "content": "const AbstractNetwork = require('./../abstract/abstract-network')\n// const lremove = require('lodash/remove');\nconst Cyclon = require('./cyclon/cyclon')\nconst lmerge = require('lodash.merge')\n\n/**\n * CyclonAdapter adapts the usage of a Cyclon RPS in the foglet library.\n * @extends AbstractNetwork\n * @author Grall Arnaud (Folkvir)\n */\nclass CyclonAdapter extends AbstractNetwork {\n  constructor (options) {\n    super(lmerge({\n      webrtc: { // add WebRTC options\n        trickle: true, // enable trickle (divide offers in multiple small offers sent by pieces)\n        config: {iceServers: []} // define iceServers in non local instance\n      },\n      origins: '*'\n    }, options))\n  }\n\n  /**\n   * Build a Spray RPS\n   * @param {Object} options - Options used to build the RPS\n   * @return {Spray} The Spray network\n   */\n  _buildRPS (options) {\n    // if webrtc options specified: create object config for Spray\n    const cyclonOptions = lmerge({config: options.webrtc}, options)\n    return new Cyclon(cyclonOptions)\n  }\n\n  /**\n   * The in-view ID of the peer in the network\n   * @return {string} The in-view ID of the peer\n   */\n  get inviewId () {\n    return this._rps.getInviewId()\n  }\n\n  /**\n   * The out-view ID of the peer in the network\n   * @return {string} The out-view ID of the peer\n   */\n  get outviewId () {\n    return this._rps.getOutviewId()\n  }\n\n  /**\n   * Get the IDs of all available neighbours with or without their suffix -I or -O\n   * @param  {Boolean} transform - transform IDs into reachable ids to used for send messages => (peer) => peer-O\n   * @return {String[]} Set of IDs for all available neighbours\n   */\n  getReachableNeighbours (transform = true) {\n    return this._rps.uniqNeighbours(transform)\n  }\n\n  /**\n   * Get the IDs of all available neighbours with or without their suffix -I or -O\n   * @param  {Integer} limit - Max number of neighbours to look for\n   * @return {String[]} Set of IDs for all available neighbours\n   */\n  getNeighbours (limit = undefined) {\n    return this._rps.getPeers(limit)\n  }\n\n  /**\n   * Get the IDs of all available neighbours\n   * @return {String[]} Set of IDs for all available neighbours\n   */\n  getArcs () {\n    const arcs = this._rps.neighbours()\n    const i = arcs.inview.map(entry => entry.peer)\n    const o = arcs.inview.map(entry => entry.peer)\n    return i.concat(o)\n  }\n}\n\nmodule.exports = CyclonAdapter\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/rps/cyclon-adapter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "class",
    "name": "CyclonAdapter",
    "memberof": "src/network/rps/cyclon-adapter.js",
    "static": true,
    "longname": "src/network/rps/cyclon-adapter.js~CyclonAdapter",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/rps/cyclon-adapter.js",
    "importStyle": "CyclonAdapter",
    "description": "CyclonAdapter adapts the usage of a Cyclon RPS in the foglet library.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Grall Arnaud (Folkvir)"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 346,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/rps/cyclon-adapter.js~CyclonAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon-adapter.js~CyclonAdapter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "_buildRPS",
    "memberof": "src/network/rps/cyclon-adapter.js~CyclonAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon-adapter.js~CyclonAdapter#_buildRPS",
    "access": "private",
    "description": "Build a Spray RPS",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options used to build the RPS"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Spray"
      ],
      "spread": false,
      "description": "The Spray network"
    }
  },
  {
    "__docId__": 348,
    "kind": "get",
    "name": "inviewId",
    "memberof": "src/network/rps/cyclon-adapter.js~CyclonAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon-adapter.js~CyclonAdapter#inviewId",
    "access": "public",
    "description": "The in-view ID of the peer in the network",
    "lineNumber": 37,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The in-view ID of the peer"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "get",
    "name": "outviewId",
    "memberof": "src/network/rps/cyclon-adapter.js~CyclonAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon-adapter.js~CyclonAdapter#outviewId",
    "access": "public",
    "description": "The out-view ID of the peer in the network",
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The out-view ID of the peer"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "getReachableNeighbours",
    "memberof": "src/network/rps/cyclon-adapter.js~CyclonAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon-adapter.js~CyclonAdapter#getReachableNeighbours",
    "access": "public",
    "description": "Get the IDs of all available neighbours with or without their suffix -I or -O",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "transform",
        "description": "transform IDs into reachable ids to used for send messages => (peer) => peer-O"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "getNeighbours",
    "memberof": "src/network/rps/cyclon-adapter.js~CyclonAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon-adapter.js~CyclonAdapter#getNeighbours",
    "access": "public",
    "description": "Get the IDs of all available neighbours with or without their suffix -I or -O",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Max number of neighbours to look for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "getArcs",
    "memberof": "src/network/rps/cyclon-adapter.js~CyclonAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/cyclon-adapter.js~CyclonAdapter#getArcs",
    "access": "public",
    "description": "Get the IDs of all available neighbours",
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    },
    "params": []
  },
  {
    "__docId__": 353,
    "kind": "file",
    "name": "src/network/rps/sprayAdapter.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst AbstractNetwork = require('./../abstract/abstract-network.js')\n// const lremove = require('lodash/remove');\nconst Spray = require('spray-wrtc')\nconst lmerge = require('lodash.merge')\n\n/**\n * SprayAdapter adapts the usage of a Spray RPS in the foglet library.\n * @see https://github.com/RAN3D/spray-wrtc for more details about Spray\n * @extends AbstractNetwork\n * @author Grall Arnaud (Folkvir)\n */\nclass SprayAdapter extends AbstractNetwork {\n  constructor (options) {\n    super(lmerge({\n      webrtc: { // add WebRTC options\n        trickle: true, // enable trickle (divide offers in multiple small offers sent by pieces)\n        config: {iceServers: []} // define iceServers in non local instance\n      },\n      origins: '*'\n    }, options))\n  }\n\n  /**\n   * Build a Spray RPS\n   * @param {Object} options - Options used to build the RPS\n   * @return {Spray} The Spray network\n   */\n  _buildRPS (options) {\n    // if webrtc options specified: create object config for Spray\n    const sprayOptions = lmerge({config: options.webrtc}, options)\n    return new Spray(sprayOptions)\n  }\n\n  /**\n   * The in-view ID of the peer in the network\n   * @return {string} The in-view ID of the peer\n   */\n  get inviewId () {\n    return this._rps.getInviewId()\n  }\n\n  /**\n   * The out-view ID of the peer in the network\n   * @return {string} The out-view ID of the peer\n   */\n  get outviewId () {\n    return this._rps.getOutviewId()\n  }\n\n  /**\n   * Get the IDs of all available neighbours with or without their suffix -I or -O\n   * @param  {Boolean} transform - transform IDs into reachable ids to used for send messages => (peer) => peer-O\n   * @return {String[]} Set of IDs for all available neighbours\n   */\n  getReachableNeighbours (transform = true) {\n    return this._rps.uniqNeighbours(transform)\n  }\n\n  /**\n   * Get the IDs of all available neighbours with or without their suffix -I or -O\n   * @param  {Integer} limit - Max number of neighbours to look for\n   * @return {String[]} Set of IDs for all available neighbours\n   */\n  getNeighbours (limit = undefined) {\n    return this._rps.getPeers(limit)\n  }\n\n  /**\n   * Get the IDs of all available neighbours\n   * @return {String[]} Set of IDs for all available neighbours\n   */\n  getArcs () {\n    const arcs = this._rps.neighbours()\n    const i = arcs.inview.map(entry => entry.peer)\n    const o = arcs.inview.map(entry => entry.peer)\n    return i.concat(o)\n  }\n}\n\nmodule.exports = SprayAdapter\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/rps/sprayAdapter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 354,
    "kind": "class",
    "name": "SprayAdapter",
    "memberof": "src/network/rps/sprayAdapter.js",
    "static": true,
    "longname": "src/network/rps/sprayAdapter.js~SprayAdapter",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/rps/sprayAdapter.js",
    "importStyle": "SprayAdapter",
    "description": "SprayAdapter adapts the usage of a Spray RPS in the foglet library.",
    "see": [
      "https://github.com/RAN3D/spray-wrtc for more details about Spray"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Grall Arnaud (Folkvir)"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/rps/sprayAdapter.js~SprayAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/sprayAdapter.js~SprayAdapter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "_buildRPS",
    "memberof": "src/network/rps/sprayAdapter.js~SprayAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/sprayAdapter.js~SprayAdapter#_buildRPS",
    "access": "private",
    "description": "Build a Spray RPS",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options used to build the RPS"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Spray"
      ],
      "spread": false,
      "description": "The Spray network"
    }
  },
  {
    "__docId__": 357,
    "kind": "get",
    "name": "inviewId",
    "memberof": "src/network/rps/sprayAdapter.js~SprayAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/sprayAdapter.js~SprayAdapter#inviewId",
    "access": "public",
    "description": "The in-view ID of the peer in the network",
    "lineNumber": 63,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The in-view ID of the peer"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "get",
    "name": "outviewId",
    "memberof": "src/network/rps/sprayAdapter.js~SprayAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/sprayAdapter.js~SprayAdapter#outviewId",
    "access": "public",
    "description": "The out-view ID of the peer in the network",
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The out-view ID of the peer"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "getReachableNeighbours",
    "memberof": "src/network/rps/sprayAdapter.js~SprayAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/sprayAdapter.js~SprayAdapter#getReachableNeighbours",
    "access": "public",
    "description": "Get the IDs of all available neighbours with or without their suffix -I or -O",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "transform",
        "description": "transform IDs into reachable ids to used for send messages => (peer) => peer-O"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    }
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "getNeighbours",
    "memberof": "src/network/rps/sprayAdapter.js~SprayAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/sprayAdapter.js~SprayAdapter#getNeighbours",
    "access": "public",
    "description": "Get the IDs of all available neighbours with or without their suffix -I or -O",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Max number of neighbours to look for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "getArcs",
    "memberof": "src/network/rps/sprayAdapter.js~SprayAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/rps/sprayAdapter.js~SprayAdapter#getArcs",
    "access": "public",
    "description": "Get the IDs of all available neighbours",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "Set of IDs for all available neighbours"
    },
    "params": []
  },
  {
    "__docId__": 362,
    "kind": "file",
    "name": "src/network/signaling/signaling.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016-2017 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\nconst EventEmitter = require('events')\nconst SocketIo = require('socket.io-client')\nconst debug = (require('debug'))('foglet-core:signaling')\nconst lmerge = require('lodash.merge')\nconst uuid = require('uuid/v4')\n\n/**\n * Signaling is an interface with a signaling server with the same APi as `foglet-signaling-server` {@see https://github.com/RAN3D/foglet-signaling-server}.\n *\n * It allow for direct connection between peers, or for connection through a signaling server.\n * @extends EventEmitter\n * @author Folkvir\n */\nclass Signaling extends EventEmitter {\n  /**\n   * Constructor\n   * @param {AbstractNetwork} source - The source RPS/network\n   * @param {Object} options - Options used to configure the connection to the signaling server\n   * @param {string} options.address - URL of the signaling server\n   * @param {string} options.room - Name of the room in which the application run\n   */\n  constructor (source, options) {\n    super()\n    if (!source || !options || !options.address || !options.room) {\n      debug(options)\n      throw new SyntaxError('Not enough parameters, need a source an address and a room.')\n    }\n    this.options = lmerge({\n      address: 'http://localhost:3000/',\n      origins: '*',\n      room: uuid(),\n      timeout: 20000,\n      io: SocketIo,\n      reconnectionAttempts: 10\n    }, options)\n    debug('Signaling options: ', this.options)\n    this._network = source\n    this._id = this._network.id\n    this._source = source.rps\n    this._socket = this.options.io(this.options.address, {\n      autoConnect: false,\n      origins: this.options.origins,\n      reconnectionAttempts: this.options.reconnectionAttempts,\n      timeout: this.options.timeout\n    })\n    this._socket.on('connect_timeout', (timeout) => {\n      this.unsignaling()\n      this._manageTimeout(timeout)\n    })\n    this._socket.on('connect_error', (error) => {\n      this.unsignaling()\n      this._manageConnectionError(error)\n    })\n    this._socket.on('error', (error) => {\n      this.unsignaling()\n      this._manageError(error)\n    })\n    this._socket.on('disconnect', (reason) => {\n      this._manageDisconnection(reason)\n    })\n    this._socket.on('new_spray', (data) => {\n      const signalingAccept = offer => {\n        debug('Emit the accepted offer: ', offer)\n        this._socket.emit('accept', { id: this._id, offer, room: this.options.room })\n      }\n      debug('Receive a new offer: ', data)\n      this._source.connect(signalingAccept, data)\n    })\n    this._socket.on('accept_spray', (data) => {\n      debug('Receive an accepted offer: ', data)\n      this._source.connect(data)\n    })\n  }\n\n  /**\n   * Connect the peer to the network.\n   * If no peer is supplied, rely on the signaling server to connect the peer to the network.\n   * @param {AbstractNetwork|null} network - (optional) Network to connect with. If not supplied, use the signaling server instead.\n   * @param {number} timeout - (optional) Timeout for the interactions with the signaling server\n   * @return {Promise} A promise fullfilled when the connection is established or failed.\n   */\n  connection (network = null, timeout = this.options.timeout) {\n    if (network === null && this._socket === null) { return Promise.reject(new Error('There is no available connection to the server. Try to use the function signaling() before.')) }\n    return new Promise((resolve, reject) => {\n      const timeoutID = setTimeout(() => {\n        reject(new Error('connection timed out.'))\n      }, timeout)\n      const done = (alone = false) => {\n        clearTimeout(timeoutID)\n        resolve({connected: true, alone})\n      }\n      const handleError = error => {\n        if (error === 'connected') {\n          done()\n        } else {\n          clearTimeout(timeoutID)\n          reject(error)\n        }\n      }\n\n      try {\n        if (network) {\n          this._source.join(this.direct(this._network.rps, network.rps)).then(() => {\n            done()\n          }).catch(handleError)\n        } else {\n          debug('Connecting to the room ' + this.options.room + '...')\n          this._socket.emit('joinRoom', { id: this._id, room: this.options.room })\n          this._socket.on('joinedRoom', (response) => {\n            if (response.connected) {\n              done(true)\n            } else {\n              this._source.join(this._signalingInit()).then(() => {\n                this._socket.emit('connected', { id: this._id, room: this.options.room })\n              }).catch(handleError)\n              this._socket.once('connected', () => {\n                debug('Peer connected.')\n                done()\n              })\n            }\n            debug('Connected to the room: ' + this.options.room)\n          })\n        }\n      } catch (error) {\n        reject(error)\n      }\n    })\n  }\n\n  /**\n  * Enable signaling exchange with a signaling server in order to allow new user to connect with us.\n  * @return {void}\n  */\n  signaling () {\n    debug('Connection to the signaling server...')\n    this._socket.open()\n  }\n\n  /**\n  * Disable signaling exchange and disconnect from the server\n  * @return {void}\n  */\n  unsignaling () {\n    debug('Disconnection from the signaling server...')\n    this._socket.emit('disconnect')\n    this._socket.removeAllListeners('connected')\n    this._socket.removeAllListeners('joinedRoom')\n    this._socket.close()\n  }\n\n  /**\n   * Enable direct connection between 2 peers\n   * @private\n   * @param  {Object} src  Source\n   * @param  {Object} dest Destination\n   * @return {function} Function that connect the source to the destination\n   */\n  direct (src, dest) {\n    return offer => {\n      dest.connect(answer => {\n        src.connect(answer)\n      }, offer)\n    }\n  }\n\n  /**\n   * Begin a signaling exchange\n   * @private\n   * @return {function} The function used to handle an offer\n   */\n  _signalingInit () {\n    console.log(this._id)\n    const self = this\n    return offer => {\n      debug('Emit a new offer.')\n      this._socket.emit('new', {id: self._id, tid: uuid(), offer, room: this.options.room})\n    }\n  }\n\n  /**\n   * Manage when a timeout occures\n   * @param  {Object} timeout Timeout error returned by socket.io\n   * @return {void}\n   */\n  _manageTimeout (timeout) {\n    debug(timeout)\n  }\n\n  /**\n   * Manage when an error occures\n   * @param  {Object} error Error returned by socket.io\n   * @return {void}\n   */\n  _manageError (error) {\n    debug(error)\n  }\n\n  /**\n   * Manage when a disconnection occures\n   * @param  {Object} reason Reason of the disconnection returned by socket.io\n   * @return {void}\n   */\n  _manageDisconnection (reason) {\n    debug(reason)\n  }\n\n  /**\n   * Manage when a connection error occures\n   * @param  {Object} error Reason of the connection error returned by socket.io\n   * @return {void}\n   */\n  _manageConnectionError (error) {\n    debug(error)\n  }\n}\n\nmodule.exports = Signaling\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/network/signaling/signaling.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 363,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/network/signaling/signaling.js",
    "static": true,
    "longname": "src/network/signaling/signaling.js~debug",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/network/signaling/signaling.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 364,
    "kind": "class",
    "name": "Signaling",
    "memberof": "src/network/signaling/signaling.js",
    "static": true,
    "longname": "src/network/signaling/signaling.js~Signaling",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/network/signaling/signaling.js",
    "importStyle": "Signaling",
    "description": "Signaling is an interface with a signaling server with the same APi as `foglet-signaling-server` {@see https://github.com/RAN3D/foglet-signaling-server}.\n\nIt allow for direct connection between peers, or for connection through a signaling server.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Folkvir"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 365,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractNetwork"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The source RPS/network"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options used to configure the connection to the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.address",
        "description": "URL of the signaling server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.room",
        "description": "Name of the room in which the application run"
      }
    ]
  },
  {
    "__docId__": 366,
    "kind": "member",
    "name": "options",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#options",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "member",
    "name": "_network",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_network",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "_id",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_id",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "_source",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_source",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "_socket",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_socket",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "connection",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#connection",
    "access": "public",
    "description": "Connect the peer to the network.\nIf no peer is supplied, rely on the signaling server to connect the peer to the network.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractNetwork",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "network",
        "description": "(optional) Network to connect with. If not supplied, use the signaling server instead."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeout",
        "description": "(optional) Timeout for the interactions with the signaling server"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise fullfilled when the connection is established or failed."
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "signaling",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#signaling",
    "access": "public",
    "description": "Enable signaling exchange with a signaling server in order to allow new user to connect with us.",
    "lineNumber": 159,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "unsignaling",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#unsignaling",
    "access": "public",
    "description": "Disable signaling exchange and disconnect from the server",
    "lineNumber": 168,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "direct",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#direct",
    "access": "private",
    "description": "Enable direct connection between 2 peers",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "Source"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dest",
        "description": "Destination"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Function that connect the source to the destination"
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "_signalingInit",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_signalingInit",
    "access": "private",
    "description": "Begin a signaling exchange",
    "lineNumber": 196,
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "The function used to handle an offer"
    },
    "params": []
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "_manageTimeout",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_manageTimeout",
    "access": "private",
    "description": "Manage when a timeout occures",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "timeout",
        "description": "Timeout error returned by socket.io"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "_manageError",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_manageError",
    "access": "private",
    "description": "Manage when an error occures",
    "lineNumber": 219,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Error returned by socket.io"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "_manageDisconnection",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_manageDisconnection",
    "access": "private",
    "description": "Manage when a disconnection occures",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "Reason of the disconnection returned by socket.io"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "_manageConnectionError",
    "memberof": "src/network/signaling/signaling.js~Signaling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/network/signaling/signaling.js~Signaling#_manageConnectionError",
    "access": "private",
    "description": "Manage when a connection error occures",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Reason of the connection error returned by socket.io"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 380,
    "kind": "file",
    "name": "src/utils/media.js",
    "content": "const CommunicationProtocol = require('../network/communication/abstract/communication-protocol')\nconst Communication = require('../network/communication/communication')\nconst debug = (require('debug'))('foglet-core:media')\nconst uuid = require('uuid/v4')\nconst lmerge = require('lodash.merge')\nconst MediaRecorderStream = require('media-recorder-stream')\nconst MediaSource = require('mediasource')\nconst Stream = require('stream')\n\nclass ReadableFromStream extends Stream.Readable {\n  constructor (source, parent, options) {\n    super(options)\n    this.source = source\n    this.parent = parent\n    this.objectMode = true\n    this.count = 0\n    let stack = ''\n    this.source.on('data', (data) => {\n      if (this.count === 0) {\n        if (!this.parent._activeStream.has(data.id)) {\n          debug('Setting options for %s', data.id, data)\n          this.parent._activeStream.set(data.id, {source: this, options: data})\n        }\n        this.parent.emit('receive', data.id)\n        this.count++\n      } else {\n        if (data.type === 'full') {\n          this.push(data.payload)\n          this.count++\n        } else if (data.type === 'end') {\n          stack += data.payload\n          this.push(new Uint8Array(JSON.parse(stack).data))\n          this.count++\n          stack = ''\n        } else {\n          stack += data.payload\n        }\n      }\n    })\n    this.source.on('end', () => {\n      this.end()\n    })\n  }\n\n  _read (size) {}\n}\n\n/**\n * Media Stream Manager\n * If using Video/audio stream for all users: use the broadcast primitive (Data Channel)\n * If using Video/audio stream for only one user, use the unicast primitive (Streaming)\n * But pay attention that using unicast method, when a shuffling occur the connection might diseapear.\n * For this usage, create an overlay network with only this peer connected to you.\n * Or shut down the shuffle mechanism but this is not recommended.\n * @extends CommunicationProtocol\n */\nclass Media extends CommunicationProtocol {\n  constructor (source, protocol, options) {\n    super(source, `foglet-media-internal-${protocol}`)\n    this.options = {\n      chunkSize: 16 * 1000 // pay attention to the maximum, or it will not work. see (http://viblast.com/blog/2015/2/5/webrtc-data-channel-message-size/)\n    }\n    this._activeMedia = new Map()\n    this._activeStream = new Map()\n    this._communication = new Communication(source, `foglet-media-internal-${protocol}`)\n\n    this.NI = this._source.rps.NI\n    this.NO = this._source.rps.NO\n\n    this.i = this._source.rps.i\n    this.o = this._source.rps.o\n    this._source.rps.on('stream', (id, stream) => {\n      this._receive(id, stream)\n    })\n\n    this._communication.onStreamBroadcast((id, stream) => {\n      debug('Receive a media stream: ', id, stream)\n      this._reconstruct(stream)\n    })\n  }\n\n  get pid () {\n    return this._source.rps._pid()\n  }\n\n  /**\n   * Send a message to only one neighbor...\n   * @param {Object} id - The id to send the stream (media) to\n   * @param  {Object}  media  - The stream to send\n   * @return {boolean}\n   */\n  sendUnicast (id, media) {\n    if (!media.id) media.id = uuid()\n    if (!this._activeMedia.has(media.id)) {\n      this._activeMedia.set(media.id, media)\n      this._setListeners(media)\n    }\n    return this._source.rps.stream(id, media)\n  }\n\n  /**\n   * Send a MediaStream using our broadcast primitives using Data Channel.\n   * @param {Object}  media  - The stream to send\n   * @param {Object} options - MediaRecorder options (see MediaRecorder API)\n   * @return {boolean}\n   */\n  sendBroadcastOverDataChannel (media, options = {}) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder\n    options = lmerge({\n      mimeType: 'video/webm; codecs=\"vp8\"', // You MUST set the MIME type\n      interval: 100, // A short interval is recommended to keep buffer sizes low\n      bitsPerSecond: 128 * 1024\n    }, options)\n\n    if (!media.id) media.id = uuid()\n    if (!this._activeMedia.has(media.id)) {\n      this._activeMedia.set(media.id, media)\n      this._setListeners(media)\n    }\n    console.log(media, options)\n    let ms\n    try {\n      ms = new MediaRecorderStream(media, options)\n    } catch (e) {\n      throw new Error('Error when recording the media: ', e)\n    }\n    const stream = this._communication.streamBroadcast()\n    options.id = media.id\n    stream.write(options)\n    ms.on('data', (data) => {\n      const chunkified = this.chunkify(JSON.stringify(data))\n      if (chunkified.length === 0) {\n        stream.write({\n          type: 'full',\n          id: 0,\n          payload: chunkified[0]\n        })\n      } else {\n        for (let i = 0; i < chunkified.length; i++) {\n          if (i === chunkified.length - 1) {\n            stream.write({\n              type: 'end',\n              id: i,\n              payload: chunkified[i]\n            })\n          } else {\n            stream.write({\n              type: 'chunk',\n              id: i,\n              payload: chunkified[i]\n            })\n          }\n        }\n      }\n    })\n    ms.on('end', () => {\n      stream.end()\n    })\n  }\n\n  _reconstruct (stream, options = null) {\n    const readable = new ReadableFromStream(stream, this)\n    readable.on('error', (err) => {\n      console.error(err)\n    })\n  }\n\n  getStreamMedia (id, elem) {\n    if (!this._activeStream.has(id)) return undefined\n    const wrapper = new MediaSource(elem)\n    const writable = wrapper.createWriteStream(this._activeStream.get(id).options.mimeType)\n    elem.addEventListener('error', function () {\n      // listen for errors on the video/audio element directly\n      var errorCode = elem.error\n      var detailedError = wrapper.detailedError\n      console.error(errorCode, detailedError)\n      // wrapper.detailedError will often have a more detailed error message\n    })\n\n    writable.on('error', function (err) {\n      // listening to the stream 'error' event is optional\n      console.error(err)\n    })\n    this._activeStream.get(id).source.pipe(writable)\n  }\n\n  /**\n   * Handler executed when a message is recevied\n   * @param  {string} id  - Message issuer's ID\n   * @param  {Object} stream - The stream received\n   * @return {void}\n   */\n  _receive (id, stream) {\n    debug('Receive a media stream: ', id, stream)\n    if (!stream.id) stream.id = uuid()\n    if (!this._activeMedia.has(stream.id)) {\n      this._activeMedia.set(stream.id, {peer: id, stream})\n      this._setListeners(stream)\n    }\n    this.emit('receive', id, stream)\n  }\n\n  _setListeners (media) {\n    media.onactive = () => {\n      console.log('Media %s is active...', media.id)\n    }\n    media.oninactive = () => {\n      console.log('Media %s is inactive... (Disconnection or a Shuffling occured.)', media.id)\n      // this._sendRequest(media.id)\n    }\n    media.onended = () => {\n      console.log('Media %s is finished...', media.id)\n    }\n  }\n\n  /**\n   * Chunk a string into n message of size 'chunkSize'\n   * @param {string} string\n   * @param {Number=this.options.chunkSize} chunkSize\n   */\n  chunkify (string, chunkSize = this.options.chunkSize) {\n    // https://stackoverflow.com/questions/7033639/split-large-string-in-n-size-chunks-in-javascript\n    return string.match(new RegExp('.{1,' + chunkSize + '}', 'g'))\n  }\n}\n\nmodule.exports = Media\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/utils/media.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/utils/media.js",
    "static": true,
    "longname": "src/utils/media.js~debug",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/utils/media.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 382,
    "kind": "class",
    "name": "ReadableFromStream",
    "memberof": "src/utils/media.js",
    "static": true,
    "longname": "src/utils/media.js~ReadableFromStream",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/utils/media.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "stream~Stream.Readable"
    ],
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/media.js~ReadableFromStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~ReadableFromStream#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "source",
    "memberof": "src/utils/media.js~ReadableFromStream",
    "static": false,
    "longname": "src/utils/media.js~ReadableFromStream#source",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "parent",
    "memberof": "src/utils/media.js~ReadableFromStream",
    "static": false,
    "longname": "src/utils/media.js~ReadableFromStream#parent",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "objectMode",
    "memberof": "src/utils/media.js~ReadableFromStream",
    "static": false,
    "longname": "src/utils/media.js~ReadableFromStream#objectMode",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "count",
    "memberof": "src/utils/media.js~ReadableFromStream",
    "static": false,
    "longname": "src/utils/media.js~ReadableFromStream#count",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "_read",
    "memberof": "src/utils/media.js~ReadableFromStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~ReadableFromStream#_read",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "class",
    "name": "Media",
    "memberof": "src/utils/media.js",
    "static": true,
    "longname": "src/utils/media.js~Media",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/utils/media.js",
    "importStyle": "Media",
    "description": "Media Stream Manager\nIf using Video/audio stream for all users: use the broadcast primitive (Data Channel)\nIf using Video/audio stream for only one user, use the unicast primitive (Streaming)\nBut pay attention that using unicast method, when a shuffling occur the connection might diseapear.\nFor this usage, create an overlay network with only this peer connected to you.\nOr shut down the shuffle mechanism but this is not recommended.",
    "lineNumber": 57,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 390,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "options",
    "memberof": "src/utils/media.js~Media",
    "static": false,
    "longname": "src/utils/media.js~Media#options",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "{\"chunkSize\": *}"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "_activeMedia",
    "memberof": "src/utils/media.js~Media",
    "static": false,
    "longname": "src/utils/media.js~Media#_activeMedia",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "_activeStream",
    "memberof": "src/utils/media.js~Media",
    "static": false,
    "longname": "src/utils/media.js~Media#_activeStream",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "_communication",
    "memberof": "src/utils/media.js~Media",
    "static": false,
    "longname": "src/utils/media.js~Media#_communication",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "NI",
    "memberof": "src/utils/media.js~Media",
    "static": false,
    "longname": "src/utils/media.js~Media#NI",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "NO",
    "memberof": "src/utils/media.js~Media",
    "static": false,
    "longname": "src/utils/media.js~Media#NO",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "i",
    "memberof": "src/utils/media.js~Media",
    "static": false,
    "longname": "src/utils/media.js~Media#i",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "o",
    "memberof": "src/utils/media.js~Media",
    "static": false,
    "longname": "src/utils/media.js~Media#o",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "get",
    "name": "pid",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#pid",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "sendUnicast",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#sendUnicast",
    "access": "public",
    "description": "Send a message to only one neighbor...",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id to send the stream (media) to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "media",
        "description": "The stream to send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "sendBroadcastOverDataChannel",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#sendBroadcastOverDataChannel",
    "access": "public",
    "description": "Send a MediaStream using our broadcast primitives using Data Channel.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "media",
        "description": "The stream to send"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "MediaRecorder options (see MediaRecorder API)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "_reconstruct",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#_reconstruct",
    "access": "private",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "getStreamMedia",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#getStreamMedia",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "elem",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "_receive",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#_receive",
    "access": "private",
    "description": "Handler executed when a message is recevied",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Message issuer's ID"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "The stream received"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "_setListeners",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#_setListeners",
    "access": "private",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [
      {
        "name": "media",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "chunkify",
    "memberof": "src/utils/media.js~Media",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/media.js~Media#chunkify",
    "access": "public",
    "description": "Chunk a string into n message of size 'chunkSize'",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number=this.options.chunkSize"
        ],
        "spread": false,
        "optional": false,
        "name": "chunkSize",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "file",
    "name": "src/utils/middleware-registry.js",
    "content": "/*\nMIT License\n\nCopyright (c) 2016 Grall Arnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n'use strict'\n\n/**\n * A Middleware registry coordintaes middleware in a foglet application\n * @author Thomas Minier\n */\nclass MiddlewareRegistry {\n  /**\n   * Constructor\n   */\n  constructor () {\n    this._middlewares = []\n  }\n\n  /**\n   * Register a middleware, with an optional priority\n   * @param  {Object} middleware   - The middleware to register\n   * @param  {function} middleware.in - Function applied on middleware input\n   * @param  {function} middleware.out - Function applied on middleware output\n   * @param  {Number} [priority=0] - (optional) The middleware priority\n   * @return {void}\n   */\n  register (middleware, priority = 0) {\n    if (!('in' in middleware) && !('out' in middleware)) { throw new Error('A middleware must contains two functions: \"in\" and \"out\"') }\n    this._middlewares.push({\n      middleware,\n      priority\n    })\n    this._middlewares.sort((x, y) => x.priority - y.priority)\n  }\n\n  /**\n   * Apply middleware on input data\n   * @param  {*} data - Input data\n   * @return {*} Input data transformed by successive application of middlewares\n   */\n  in (data) {\n    let temp\n    return this._middlewares.reduce((input, obj) => {\n      temp = obj.middleware.in(input)\n      if (temp !== undefined || temp !== null) { return temp }\n      return input\n    }, data)\n  }\n\n  /**\n   * Apply middleware on output data\n   * @param  {*} data - Output data\n   * @return {*} Output data transformed by successive application of middlewares\n   */\n  out (data) {\n    let temp\n    return this._middlewares.reduce((input, obj) => {\n      temp = obj.middleware.out(input)\n      if (temp !== undefined || temp !== null) { return temp }\n      return input\n    }, data)\n  }\n}\n\nmodule.exports = MiddlewareRegistry\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/utils/middleware-registry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 408,
    "kind": "class",
    "name": "MiddlewareRegistry",
    "memberof": "src/utils/middleware-registry.js",
    "static": true,
    "longname": "src/utils/middleware-registry.js~MiddlewareRegistry",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/utils/middleware-registry.js",
    "importStyle": "MiddlewareRegistry",
    "description": "A Middleware registry coordintaes middleware in a foglet application",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Thomas Minier"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 409,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/middleware-registry.js~MiddlewareRegistry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/middleware-registry.js~MiddlewareRegistry#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 34
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "_middlewares",
    "memberof": "src/utils/middleware-registry.js~MiddlewareRegistry",
    "static": false,
    "longname": "src/utils/middleware-registry.js~MiddlewareRegistry#_middlewares",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "register",
    "memberof": "src/utils/middleware-registry.js~MiddlewareRegistry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/middleware-registry.js~MiddlewareRegistry#register",
    "access": "public",
    "description": "Register a middleware, with an optional priority",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "The middleware to register"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.in",
        "description": "Function applied on middleware input"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware.out",
        "description": "Function applied on middleware output"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "priority",
        "description": "(optional) The middleware priority"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "in",
    "memberof": "src/utils/middleware-registry.js~MiddlewareRegistry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/middleware-registry.js~MiddlewareRegistry#in",
    "access": "public",
    "description": "Apply middleware on input data",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Input data transformed by successive application of middlewares"
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "out",
    "memberof": "src/utils/middleware-registry.js~MiddlewareRegistry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/middleware-registry.js~MiddlewareRegistry#out",
    "access": "public",
    "description": "Apply middleware on output data",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Output data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Output data transformed by successive application of middlewares"
    }
  },
  {
    "__docId__": 414,
    "kind": "file",
    "name": "src/utils/simple-peer-moc.js",
    "content": "const EventEmitter = require('events')\nconst lmerge = require('lodash.merge')\nconst uniqid = require('uuid/v4')\nconst debug = require('debug')\nconst debugManager = debug('spa')\n\nconst DEFAULT_OPTIONS = () => {\n  return {\n    id: uniqid(),\n    initiator: false,\n    channelConfig: {},\n    channelName: uniqid(),\n    config: { iceServers: [ { urls: 'stun:stun.l.google.com:19302' } ] },\n    constraints: {},\n    offerConstraints: {},\n    answerConstraints: {},\n    reconnectTimer: false,\n    sdpTransform: function (sdp) { return sdp },\n    stream: false,\n    streams: [],\n    trickle: true,\n    wrtc: {}, // RTCPeerConnection/RTCSessionDescription/RTCIceCandidate\n    objectMode: false\n  }\n}\n\nclass Manager {\n  constructor () {\n    this._statistics = {\n      message: 0\n    }\n    this.manager = new Map()\n    this._options = {\n      latency: (send) => { setTimeout(send, 0) }\n    }\n    debugManager('manager initialized')\n  }\n  get stats () {\n    return this._statistics\n  }\n\n  newPeer (peer) {\n    debugManager('new peer added. Size:', this.manager.size)\n    this.manager.set(peer.id, peer)\n  }\n\n  connect (from, to) {\n    debugManager('peer connected from/to: ', from, to)\n    this.manager.get(to)._connectWith(from)\n    this.manager.get(from)._connectWith(to)\n  }\n\n  destroy (from, to) {\n    debugManager('peer disconnected from/to: ', from, to)\n    if (this.manager.get(from)) {\n      this.manager.get(from)._close()\n      this.manager.delete(from)\n    }\n    if (this.manager.get(to)) {\n      this.manager.get(to)._close()\n      this.manager.delete(to)\n    }\n  }\n\n  send (from, to, msg, retry = 0) {\n    // this._options.latency(() => {\n    this._send(from, to, msg, retry)\n    // })\n  }\n\n  _send (from, to, msg, retry = 0) {\n    try {\n      if (!this.manager.has(from) || !this.manager.has(to)) throw new Error('need a from and to peer.')\n      this.manager.get(to).emit('data', msg)\n      this._statistics.message++\n    } catch (e) {\n      throw new Error('cannot send the message. perhaps your destination is not reachable.', e)\n    }\n  }\n}\nconst manager = new Manager()\n\nmodule.exports = class SimplePeerAbstract extends EventEmitter {\n  constructor (options) {\n    super()\n    this._manager = manager\n    this._options = lmerge(DEFAULT_OPTIONS(), options)\n    this.id = this._options.id\n    this.WEBRTC_SUPPORT = true // yes but this a fake\n    this._isNegotiating = false\n    this.connected = false\n    this.disconnected = false\n    this.connectedWith = undefined\n    this.messageBuffer = []\n    debugManager('peer initiated:', this.id, this._options.initiator)\n    if (this._options.initiator) {\n      // workaround to wait for a listener on 'signal'\n      process.nextTick(() => {\n        this._init()\n      })\n    }\n    this._manager.newPeer(this)\n  }\n\n  static get manager () {\n    return manager\n  }\n\n  send (data) {\n    if (!this.connectedWith) {\n      this.messageBuffer.push(data)\n    } else {\n      if (this.messageBuffer.length > 0) {\n        this._reviewMessageBuffer()\n      }\n      if (this.connectedWith) {\n        this._send(this.connectedWith, data)\n      } else {\n        this.messageBuffer.push(data)\n      }\n    }\n  }\n\n  destroy () {\n    this._manager.destroy(this.id, this.connectedWith)\n  }\n\n  signal (data) {\n    if (data.type === 'init') {\n      this._isNegotiating = true\n      debugManager('offer-init received:', data)\n      this.emit('signal', this._createAccept(data))\n    } else if (data.type === 'accept') {\n      debugManager('offer-accept received:', data)\n      this._connect(data)\n    }\n  }\n\n  _error (error) {\n    debugManager(error)\n    this.emit('error', error)\n  }\n\n  _close () {\n    debugManager('[%s] is closed.', this.id)\n    this.emit('close')\n  }\n\n  _init () {\n    this._isNegotiating = true\n    const offer = this._createOffer()\n    this.emit('signal', offer)\n  }\n\n  _createOffer () {\n    const newOffer = {\n      offerId: uniqid(),\n      type: 'init',\n      offer: {\n        initiator: this.id\n      }\n    }\n    return newOffer\n  }\n  _createAccept (offer) {\n    const acceptedOffer = this._createOffer()\n    acceptedOffer.type = 'accept'\n    acceptedOffer.offerId = offer.offerId\n    acceptedOffer.offer.initiator = offer.offer.initiator\n    acceptedOffer.offer.acceptor = this.id\n    return acceptedOffer\n  }\n\n  _reviewMessageBuffer () {\n    debugManager('Review the buffer: ', this.messageBuffer.length)\n    while (this.connectedWith && this.messageBuffer.length !== 0) {\n      this._send(this.messageBuffer.pop())\n    }\n  }\n\n  _send (to = this.connectedWith, data) {\n    if (!to) throw new Error('It must have a destination.')\n    this._manager.send(this.id, to, data)\n  }\n\n  _connect (offer) {\n    if (!offer.offer.acceptor) throw new Error('It must have an acceptor')\n    this._manager.connect(offer.offer.initiator, offer.offer.acceptor)\n  }\n\n  _connectWith (connectedWith) {\n    this.connected = true\n    this._isNegotiating = false\n    this.connectedWith = connectedWith\n    this.emit('connect')\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/utils/simple-peer-moc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 415,
    "kind": "variable",
    "name": "debugManager",
    "memberof": "src/utils/simple-peer-moc.js",
    "static": true,
    "longname": "src/utils/simple-peer-moc.js~debugManager",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/utils/simple-peer-moc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 416,
    "kind": "function",
    "name": "DEFAULT_OPTIONS",
    "memberof": "src/utils/simple-peer-moc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/simple-peer-moc.js~DEFAULT_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/utils/simple-peer-moc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"id\": *, \"initiator\": *, \"channelConfig\": *, \"channelName\": *, \"config\": *, \"constraints\": *, \"offerConstraints\": *, \"answerConstraints\": *, \"reconnectTimer\": *, \"sdpTransform\": *, \"stream\": *, \"streams\": *, \"trickle\": boolean, \"wrtc\": *, \"objectMode\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 417,
    "kind": "class",
    "name": "Manager",
    "memberof": "src/utils/simple-peer-moc.js",
    "static": true,
    "longname": "src/utils/simple-peer-moc.js~Manager",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/utils/simple-peer-moc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 418,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "_statistics",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#_statistics",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "{\"message\": *}"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "manager",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#manager",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "_options",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#_options",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{\"latency\": *}"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "get",
    "name": "stats",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#stats",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "newPeer",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#newPeer",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "peer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "connect",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#connect",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "to",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "to",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "send",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#send",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "to",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      },
      {
        "name": "retry",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "_send",
    "memberof": "src/utils/simple-peer-moc.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~Manager#_send",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "to",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      },
      {
        "name": "retry",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "variable",
    "name": "manager",
    "memberof": "src/utils/simple-peer-moc.js",
    "static": true,
    "longname": "src/utils/simple-peer-moc.js~manager",
    "access": "public",
    "export": false,
    "importPath": "foglet-core/src/utils/simple-peer-moc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "src/utils/simple-peer-moc.js~Manager"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 429,
    "kind": "class",
    "name": "SimplePeerAbstract",
    "memberof": "src/utils/simple-peer-moc.js",
    "static": true,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/utils/simple-peer-moc.js",
    "importStyle": "SimplePeerAbstract",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 430,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "_manager",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_manager",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "_options",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_options",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "id",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#id",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "WEBRTC_SUPPORT",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#WEBRTC_SUPPORT",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "_isNegotiating",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_isNegotiating",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "connected",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#connected",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "disconnected",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#disconnected",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "connectedWith",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#connectedWith",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "member",
    "name": "messageBuffer",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#messageBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "get",
    "name": "manager",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract.manager",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "send",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#send",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "signal",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#signal",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "_error",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_error",
    "access": "private",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "_close",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_close",
    "access": "private",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "_init",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_init",
    "access": "private",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "_createOffer",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_createOffer",
    "access": "private",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "_createAccept",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_createAccept",
    "access": "private",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [
      {
        "name": "offer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "_reviewMessageBuffer",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_reviewMessageBuffer",
    "access": "private",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "_send",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_send",
    "access": "private",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "to",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "_connect",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_connect",
    "access": "private",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "offer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "_connectWith",
    "memberof": "src/utils/simple-peer-moc.js~SimplePeerAbstract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/simple-peer-moc.js~SimplePeerAbstract#_connectWith",
    "access": "private",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [
      {
        "name": "connectedWith",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 458,
    "kind": "file",
    "name": "src/utils/ssh.js",
    "content": "'use strict'\n/* eslint no-eval: 0 */\nconst EventEmitter = require('events')\nconst lmerge = require('lodash.merge')\nconst io = require('socket.io-client')\n\nclass SshControl extends EventEmitter {\n  constructor (options = {}) {\n    super()\n    this.options = lmerge({\n      foglet: undefined,\n      address: 'http://localhost:4000/',\n      verbose: true,\n      origins: '*'\n    }, options)\n\n    this.signaling = io.connect(this.options.address, {origins: options.origins})\n\n    this.signaling.emit('join', {\n      id: this.options.foglet.id\n    })\n\n    this.signaling.on('remoteCommand', (command) => {\n      let parsed\n      this.log('remoteCommand', command)\n      try {\n        parsed = eval('(' + command + ')')\n        this.log(parsed)\n        this.deserialize(parsed.command)(this.options.foglet)\n      } catch (e) {\n        this.log(e)\n      }\n    })\n  }\n\n  deserialize (message) {\n    return eval('(' + message + ')')\n  }\n\n  log (signal, message) {\n    if (this.options.verbose && signal !== undefined && message !== undefined) {\n      this.emit('logs', signal, message)\n    }\n  }\n}\n\nmodule.exports = SshControl\n",
    "static": true,
    "longname": "/home/travis/build/RAN3D/foglet-core/src/utils/ssh.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 459,
    "kind": "class",
    "name": "SshControl",
    "memberof": "src/utils/ssh.js",
    "static": true,
    "longname": "src/utils/ssh.js~SshControl",
    "access": "public",
    "export": true,
    "importPath": "foglet-core/src/utils/ssh.js",
    "importStyle": "SshControl",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 460,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/ssh.js~SshControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ssh.js~SshControl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "options",
    "memberof": "src/utils/ssh.js~SshControl",
    "static": false,
    "longname": "src/utils/ssh.js~SshControl#options",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "signaling",
    "memberof": "src/utils/ssh.js~SshControl",
    "static": false,
    "longname": "src/utils/ssh.js~SshControl#signaling",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/utils/ssh.js~SshControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ssh.js~SshControl#deserialize",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "log",
    "memberof": "src/utils/ssh.js~SshControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ssh.js~SshControl#log",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "signal",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "Foglet-core\n===========\n\n[![Build Status](https://travis-ci.org/RAN3D/foglet-core.svg?branch=master)](https://travis-ci.org/RAN3D/foglet-core) [![npm version](https://badge.fury.io/js/foglet-core.svg)](https://badge.fury.io/js/foglet-core) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![Documentation Status](https://readthedocs.org/projects/foglet/badge/?version=latest)](https://foglet.readthedocs.io/en/latest/?badge=latest)\n\n[![NPM](https://nodei.co/npm/foglet-core.png)](https://npmjs.org/package/foglet-core)\n\nEasy use of WebRTC Networks with embedded network management and simple communication primitives.\n\n[**Read the documentation**](https://foglet.readthedocs.io/en/latest/) or [**read the API Documentation**](https://ran3d.github.io/foglet-core/)\n\n## Features\n\n**Communication primitives**:\n- Causal Broadcast (to all peers in your network, with anti entropy not enabled by default)\n- Unicast (to one direct neighbor)\n- Multicast (to one or several direct neighbors)\n- Streaming over our Causal Broadcast and Unicast\n- Multiple communication channel per network\n\nWe only support Data Channel for the moment.\n- *Experimental* Media Unicast and Broadcast\n\n**Warning:** unicast media is working only for a period of time defined by the delta parameter in the RPS\n\n**Network management**:\n- An adapter on [ran3d/spray-wrtc](https://github.com/ran3d/spray-wrtc) as Random Peer Sampling Network (keeping log(NetworkSize) peers around you)\n- An adapter on [Cyclon](https://www.semanticscholar.org/paper/CYCLON%3A-Inexpensive-Membership-Management-for-P2P-Voulgaris-Gavidia/4b79c844bb854c11ab18981591e4d2ea01f29539) as Random Peer Sampling Network (keeping \"maxPeers\" peers around you)\n- Overlay Networks or Networks can be created with: [**ran3d/n2n-overlay-wrtc**](https://github.com/ran3d/n2n-overlay-wrtc)\n- Disable WebRTC for testing purposes (or simulation) by using our Simple-peer moc.\n\n## Installation\n\n**Prerequisite**: [a browser compatible with WebRTC](http://caniuse.com/#feat=rtcpeerconnection)\n\n```bash\nnpm install --save foglet-core\n```\n\nThe foglet library is distributed with its sources and a bundle for an in-browser usage.\n\n## Getting started\n\nCreates a new HTML file and insert the **foglet bundle** in it:\n```html\n<script src=\"node_modules/foglet-core/dist/foglet.bundle.js\" type=\"text/javascript\"></script> <!-- or use the minified bundle, foglet.bundle.min.js -->\n```\n\nThen, foglet library is available in the variable `foglet` :\n```javascript\nconst Foglet = foglet.Foglet;\n```\n\nIf you do not provide a list of **ice servers**, your example will work in localhost but not on the Web.\n\nTo be begin with, let's write a simple piece of JS code:\n```html\n<script type=\"text/javascript\">\n  'use strict';\n\n  localStorage.debug = 'foglet-core:*';\n\n  const Foglet = foglet.Foglet;\n\n  // let's create a simple application that send message in broadcast\n  const fog = new Foglet({\n    id: 'myfogletid', // default we use uuid/v4 generated id\n    rps: {\n      type: 'spray-wrtc', // we choose Spray as a our RPS\n      options: {\n        protocol: 'my-awesome-broadcast-application', // the name of the protocol run by our app\n        webrtc: { // some WebRTC options\n          trickle: true, // enable trickle\n          iceServers : [] // define iceServers here if you want to run this code outside localhost\n        },\n        signaling: { // configure the signaling server\n          address: 'http://signaling.herokuapp.com', // put the URL of the signaling server here\n          room: 'my-awesome-broadcast-application' // the name of the room for the peers of our application\n        }\n      }\n    }\n  });\n\n  // connect the foglet to the signaling server\n  fog.share();\n\n  // Connect the foglet to our network\n  fog.connection().then(() => {\n    // listen for broadcast messages\n    fog.onBroadcast((id, message) => {\n      console.log('The peer', id, 'just sent me by broadcast:', message);\n    });\n\n    // send a message in broadcast\n    fog.sendBroadcast('Hello World !');\n  });\n</script>\n```\n\nThen, open the HTML file and look into the developpers console.\nYou should see that your foglet has been connected to the RPS.\n\nOr for the fast version:\n```bash\ngit clone https://github.com/RAN3D/foglet-core.git\ncd foglet-core\nnpm install\nnpm run build\n```\n\n* Open tests/examples/example.html in a browser supporting WebRTC and the devConsole\n\n* Try to play with `testunicast()` and `testbroadcast()`\n\nor try the signaling example using a signaling server:\n* Just run a simple http server with an embedded signaling server serving the tests/examples/example-signaling.html: `npm run example`\n* open http://localhost:8000/signaling\n\n## Signaling server\n\nIn order to run this library, you have to provide the address of a **signaling server** using the `signaling.address` option and a `signaling.room` in order to create a private network. This server will be used to establish the first connection between the new peer and the the network.\n\nThis server must be compatible with the foglet library.\nThe library [foglet-signaling-server](https://github.com/folkvir/foglet-signaling-server) provides an example implementation of such signaling server.\n\n## Developpment\n\nWe offer another library which lets you to build/test/run your own application with a signaling server: https://github.com/ran3d/foglet-scripts.git\n\n```bash\n# Clone and install\ngit clone https://github.com/ran3d/foglet-core.git\nnpm install\n\n# Build the bundle (webpack stack)\nnpm run build\n\n# Lint using [standard](https://standardjs.com/)\nnpm run lint\n\n# Mocha, chai stack with a simple-peer-moc for mocking webrtc features\nnpm run test\n\n# Run a server serving examples and a signaling server on http://localhost:8000/\nnpm run example\n```\n\n## Contributors:\n\n* [A. Grall (Folkvir)](https://github.com/folkvir) **Author**\n* [T. Minier (Callidon)](https://github.com/Callidon)\n* [B. Nédelec (Chat-Wane)](https://github.com/Chat-Wane/)\n\n<div style='text-align:center'>\n<img src=\"https://octodex.github.com/images/socialite.jpg\" width=\"200\" style='text-align:center'><img src=\"https://octodex.github.com/images/collabocats.jpg\" width=\"200\" style='text-align:center'><img src=\"https://octodex.github.com/images/socialite.jpg\" width=\"200\" style='text-align:center'>\n<hr/>\n</div>\n",
    "longname": "/home/travis/build/RAN3D/foglet-core/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"foglet-core\",\n  \"version\": \"5.0.1\",\n  \"description\": \"Core of the foglet library\",\n  \"main\": \"./foglet-core.js\",\n  \"scripts\": {\n    \"lint\": \"standard --verbose | snazzy\",\n    \"fix\": \"standard --fix\",\n    \"esdoc\": \"esdoc\",\n    \"all\": \"npm run build && npm run min && npm test && npm run esdoc\",\n    \"test\": \"node ./tests/test.js\",\n    \"test-mocha\": \"nyc --reporter=html --report-dir=./docs/_coverage mocha tests/*-test.js --exit --timeout 30000 --reporter mochawesome --reporter-options reportDir=./docs/_test-reporter\",\n    \"build\": \"webpack --config ./configs/foglet-webpack-config.js\",\n    \"min\": \"webpack --config ./configs/foglet-webpack-config-min.js\",\n    \"example\": \"npm run build && DEBUG=signaling node tests/examples/server.js\",\n    \"dev\": \"webpack --config ./configs/foglet-webpack-config.js --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ran3d/foglet-core.git\"\n  },\n  \"keywords\": [\n    \"foglet\",\n    \"spray-wrtc\",\n    \"browser-to-browser\",\n    \"webRTC\",\n    \"foglet computing\"\n  ],\n  \"author\": \"Folkvir\",\n  \"contributors\": [\n    \"Chat Wane (https://github.com/Chat-Wane)\",\n    \"Thomas Minier (https://github.com/Callidon)\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ran3d/foglet-core/issues\"\n  },\n  \"homepage\": \"https://github.com/ran3d/foglet-core#readme\",\n  \"dependencies\": {\n    \"debug\": \"^3.1.0\",\n    \"lodash.merge\": \"^4.6.1\",\n    \"lodash.sortedindexby\": \"^4.6.0\",\n    \"media-recorder-stream\": \"^2.1.1\",\n    \"mediasource\": \"^2.2.1\",\n    \"n2n-overlay-wrtc\": \"^2.0.10\",\n    \"socket.io-client\": \"^2.1.1\",\n    \"spray-wrtc\": \"^2.0.11\",\n    \"tman-wrtc\": \"1.0.0\",\n    \"unicast-definition\": \"^2.0.2\",\n    \"uuid\": \"^3.3.0\",\n    \"version-vector-with-exceptions\": \"^0.1.0\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-env\": \"^1.7.0\",\n    \"chai\": \"^4.1.2\",\n    \"chart.js\": \"^2.7.2\",\n    \"cors\": \"^2.8.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-custom-theme\": \"^1.4.2\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-node\": \"^1.0.3\",\n    \"esdoc-publish-html-plugin\": \"^1.1.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"foglet-signaling-server\": \"^1.0.3\",\n    \"jquery\": \"^3.3.1\",\n    \"mocha\": \"^5.2.0\",\n    \"mochawesome\": \"^3.0.2\",\n    \"nyc\": \"^12.0.2\",\n    \"p2p-graph\": \"^1.2.2\",\n    \"snazzy\": \"^7.1.1\",\n    \"standard\": \"^11.0.1\",\n    \"twilio\": \"^3.17.4\",\n    \"uglifyjs-webpack-plugin\": \"^1.2.7\",\n    \"webpack\": \"^4.12.1\",\n    \"webpack-cli\": \"^3.0.8\"\n  },\n  \"bundledDependencies\": [\n    \"debug\",\n    \"lodash.merge\",\n    \"lodash.sortedindexby\",\n    \"readable-stream\",\n    \"socket.io-client\",\n    \"spray-wrtc\",\n    \"tman-wrtc\",\n    \"unicast-definition\",\n    \"uuid\",\n    \"version-vector-with-exceptions\",\n    \"n2n-overlay-wrtc\"\n  ],\n  \"standard\": {\n    \"globals\": [\n      \"describe\",\n      \"it\",\n      \"assert\"\n    ]\n  }\n}\n",
    "longname": "/home/travis/build/RAN3D/foglet-core/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]